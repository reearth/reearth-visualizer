interface Layer {
  id: ID!
  sceneId: ID!
  name: String!
  isVisible: Boolean!
  propertyId: ID
  pluginId: ID
  extensionId: ID
  infobox: Infobox
  # parentId will not be always set
  parentId: ID
  parent: LayerGroup
  property: Property
  plugin: Plugin
  extension: PluginExtension
  scenePlugin: ScenePlugin
  # tags: [LayerTag!]!
}

enum LayerEncodingFormat {
  KML
  CZML
  GEOJSON
  SHAPE
  REEARTH
}

type LayerItem implements Layer {
  id: ID!
  sceneId: ID!
  name: String!
  isVisible: Boolean!
  propertyId: ID
  pluginId: ID
  extensionId: ID
  infobox: Infobox
  # parentId will not be always set
  parentId: ID
  linkedDatasetId: ID
  # tags: [LayerTag!]!
  parent: LayerGroup
  property: Property
  plugin: Plugin
  extension: PluginExtension
  linkedDataset: Dataset
  merged: MergedLayer
  scene: Scene
  scenePlugin: ScenePlugin
}

type LayerGroup implements Layer {
  id: ID!
  sceneId: ID!
  name: String!
  isVisible: Boolean!
  propertyId: ID
  pluginId: ID
  extensionId: ID
  infobox: Infobox
  # parentId will not be always set
  parentId: ID
  linkedDatasetSchemaId: ID
  root: Boolean!
  layerIds: [ID!]!
  # tags: [LayerTag!]!
  parent: LayerGroup
  property: Property
  plugin: Plugin
  extension: PluginExtension
  linkedDatasetSchema: DatasetSchema
  layers: [Layer]!
  scene: Scene
  scenePlugin: ScenePlugin
}

type Infobox {
  sceneId: ID!
  layerId: ID!
  propertyId: ID!
  fields: [InfoboxField!]!
  linkedDatasetId: ID
  layer: Layer!
  property: Property
  linkedDataset: Dataset
  merged: MergedInfobox
  scene: Scene
}

type InfoboxField {
  id: ID!
  sceneId: ID!
  layerId: ID!
  propertyId: ID!
  pluginId: ID!
  extensionId: ID!
  linkedDatasetId: ID
  layer: Layer!
  infobox: Infobox!
  property: Property
  plugin: Plugin
  extension: PluginExtension
  linkedDataset: Dataset
  merged: MergedInfoboxField
  scene: Scene
  scenePlugin: ScenePlugin
}

# interface LayerTag {
#   tagId: ID!
#   tag: Tag
# }

# type LayerTagItem implements LayerTag {
#   tagId: ID!
#   tag: Tag
# }

# type LayerTagGroup implements LayerTag {
#   tagId: ID!
#   children: [LayerTagItem!]!
#   tag: Tag
# }

type MergedLayer {
  originalId: ID!
  parentId: ID
  sceneID: ID!
  property: MergedProperty
  infobox: MergedInfobox
  original: LayerItem
  parent: LayerGroup
  scene: Scene
}

type MergedInfobox {
  sceneID: ID!
  property: MergedProperty
  fields: [MergedInfoboxField!]!
  scene: Scene
}

type MergedInfoboxField {
  originalId: ID!
  sceneID: ID!
  pluginId: ID!
  extensionId: ID!
  property: MergedProperty
  plugin: Plugin
  extension: PluginExtension
  scene: Scene
  scenePlugin: ScenePlugin
}

# InputType

input AddLayerItemInput {
  parentLayerId: ID!
  pluginId: ID!
  extensionId: ID!
  index: Int
  name: String
  lat: Float
  lng: Float
}

input AddLayerGroupInput {
  parentLayerId: ID!
  pluginId: ID
  extensionId: ID
  index: Int
  linkedDatasetSchemaID: ID
  name: String
  representativeFieldId: ID
}

input RemoveLayerInput {
  layerId: ID!
}

input UpdateLayerInput {
  layerId: ID!
  name: String
  visible: Boolean
}

input MoveLayerInput {
  layerId: ID!
  destLayerId: ID
  index: Int
}

input CreateInfoboxInput {
  layerId: ID!
}

input RemoveInfoboxInput {
  layerId: ID!
}

input AddInfoboxFieldInput {
  layerId: ID!
  pluginId: ID!
  extensionId: ID!
  index: Int
}

input MoveInfoboxFieldInput {
  layerId: ID!
  infoboxFieldId: ID!
  index: Int!
}

input RemoveInfoboxFieldInput {
  layerId: ID!
  infoboxFieldId: ID!
}

input ImportLayerInput {
  layerId: ID!
  file: Upload!
  format: LayerEncodingFormat!
}

# Payload

type AddLayerItemPayload {
  layer: LayerItem!
  parentLayer: LayerGroup!
  index: Int
}

type AddLayerGroupPayload {
  layer: LayerGroup!
  parentLayer: LayerGroup!
  index: Int
}

type RemoveLayerPayload {
  layerId: ID!
  parentLayer: LayerGroup!
}

type UpdateLayerPayload {
  layer: Layer!
}

type MoveLayerPayload {
  layerId: ID!
  fromParentLayer: LayerGroup!
  toParentLayer: LayerGroup!
  index: Int!
}

type CreateInfoboxPayload {
  layer: Layer!
}

type RemoveInfoboxPayload {
  layer: Layer!
}

type AddInfoboxFieldPayload {
  infoboxField: InfoboxField!
  layer: Layer!
}

type MoveInfoboxFieldPayload {
  infoboxFieldId: ID!
  layer: Layer!
  index: Int!
}

type RemoveInfoboxFieldPayload {
  infoboxFieldId: ID!
  layer: Layer!
}

type ImportLayerPayload {
  layers: [Layer!]!
  parentLayer: LayerGroup!
}

extend type Query {
  layer(id: ID!): Layer
}

extend type Mutation {
  addLayerItem(input: AddLayerItemInput!): AddLayerItemPayload
  addLayerGroup(input: AddLayerGroupInput!): AddLayerGroupPayload
  removeLayer(input: RemoveLayerInput!): RemoveLayerPayload
  updateLayer(input: UpdateLayerInput!): UpdateLayerPayload
  moveLayer(input: MoveLayerInput!): MoveLayerPayload
  createInfobox(input: CreateInfoboxInput!): CreateInfoboxPayload
  removeInfobox(input: RemoveInfoboxInput!): RemoveInfoboxPayload
  addInfoboxField(input: AddInfoboxFieldInput!): AddInfoboxFieldPayload
  moveInfoboxField(input: MoveInfoboxFieldInput!): MoveInfoboxFieldPayload
  removeInfoboxField(input: RemoveInfoboxFieldInput!): RemoveInfoboxFieldPayload
  importLayer(input: ImportLayerInput!): ImportLayerPayload
  # attachTagToLayer(input: AttachTagToLayerInput!): AttachTagToLayerPayload
  # detachTagFromLayer(input: DetachTagFromLayerInput!): DetachTagFromLayerPayload
}
