type Project implements Node {
  id: ID!
  teamId: ID!
  team: Team
  scene: Scene
  name: String!
  description: String!
  imageUrl: URL
  createdAt: DateTime!
  updatedAt: DateTime!
  visualizer: Visualizer!
  isArchived: Boolean!
  coreSupport: Boolean!
  starred: Boolean!
  isDeleted: Boolean!
  visibility: String!

  metadata: ProjectMetadata

  projectAlias: String!

  # publishment
  alias: String!
  publishmentStatus: PublishmentStatus!
  publishedAt: DateTime
  publicTitle: String!
  publicDescription: String!
  publicImage: String!
  publicNoIndex: Boolean!
  isBasicAuthActive: Boolean!
  basicAuthUsername: String!
  basicAuthPassword: String!
  enableGa: Boolean!
  trackingId: String!
}

type ProjectMetadata {
  id: ID!
  project: ID!
  workspace: ID!
  readme: String
  license: String
  topics: String
  importStatus: ProjectImportStatus
  createdAt: DateTime
  updatedAt: DateTime
}

enum ProjectImportStatus {
  NONE
  PROCESSING
  FAILED
  SUCCESS
}

enum Visualizer {
  CESIUM
}

enum PublishmentStatus {
  PUBLIC
  LIMITED
  PRIVATE
}

enum ProjectSortField {
  CREATEDAT
  UPDATEDAT
  NAME
}

# InputType

input CreateProjectInput {
  teamId: ID!
  visualizer: Visualizer!
  name: String
  description: String
  coreSupport: Boolean
  visibility: String
  projectAlias: String

  # metadata
  readme: String
  license: String
  topics: String
}

input UpdateProjectInput {
  projectId: ID!
  name: String
  description: String
  archived: Boolean
  imageUrl: URL
  deleteImageUrl: Boolean
  sceneId: ID
  starred: Boolean
  deleted: Boolean
  visibility: String
  projectAlias: String

  # publishment
  publicTitle: String
  publicDescription: String
  publicImage: String
  publicNoIndex: Boolean
  deletePublicImage: Boolean
  isBasicAuthActive: Boolean
  basicAuthUsername: String
  basicAuthPassword: String
  enableGa: Boolean
  trackingId: String
}

input UpdateProjectMetadataInput {
  project: ID!
  readme: String
  license: String
  topics: String
}

input PublishProjectInput {
  projectId: ID!
  alias: String
  status: PublishmentStatus!
}

input DeleteProjectInput {
  projectId: ID!
}

input ProjectSort {
  field: ProjectSortField!
  direction: SortDirection!
}

input ExportProjectInput {
  projectId: ID!
}

# Payload

type ProjectPayload {
  project: Project!
}

type DeleteProjectPayload {
  projectId: ID!
}

type ExportProjectPayload {
  projectDataPath: String!
}

type ProjectAliasAvailability {
  alias: String!
  available: Boolean!
}

type ProjectMetadataPayload {
  metadata: ProjectMetadata!
}

# Connection

type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectEdge {
  cursor: Cursor!
  node: Project
}

extend type Query {
  projects(
    teamId: ID!
    pagination: Pagination
    keyword: String
    sort: ProjectSort
  ): ProjectConnection! # not included deleted projects
  checkProjectAlias(alias: String!, projectId: ID): ProjectAliasAvailability!
  starredProjects(teamId: ID!): ProjectConnection!
  deletedProjects(teamId: ID!): ProjectConnection!
}

extend type Mutation {
  createProject(input: CreateProjectInput!): ProjectPayload
  updateProject(input: UpdateProjectInput!): ProjectPayload
  publishProject(input: PublishProjectInput!): ProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  exportProject(input: ExportProjectInput!): ExportProjectPayload
  updateProjectMetadata(
    input: UpdateProjectMetadataInput!
  ): ProjectMetadataPayload
}
