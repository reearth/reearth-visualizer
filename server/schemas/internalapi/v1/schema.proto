syntax = "proto3";

package reearth.visualizer.v1;

import "google/protobuf/timestamp.proto";

option go_package = "proto/v1";

service ReEarthVisualizer {
  // Retrieves the list of projects the user can access.
  // Request headers: user-id: <User ID>
  rpc GetProjectList(GetProjectListRequest) returns (GetProjectListResponse) {}

  // Retrieves a specific project regardless of authentication.
  // Request headers: user-id: <User ID>
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {}

  // Find a project by alias.
  // Request headers: user-id: <User ID>
  rpc GetProjectByAlias(GetProjectByAliasRequest)
      returns (GetProjectByAliasResponse) {}

  // Determines if an alias is valid.
  // Request headers: user-id: <User ID>
  rpc ValidateProjectAlias(ValidateProjectAliasRequest)
      returns (ValidateProjectAliasResponse) {}

  // Creates a new project in the specified team.
  // Request headers: user-id: <User ID>
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {}

  // Update a project.
  // Request headers: user-id: <User ID>
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {}

  // Publish a project.
  // Request headers: user-id: <User ID>
  rpc PublishProject(PublishProjectRequest) returns (PublishProjectResponse) {}

  // Updates a new project metadata in the specified team.
  // Request headers: user-id: <User ID>
  rpc UpdateProjectMetadata(UpdateProjectMetadataRequest)
      returns (UpdateProjectMetadataResponse) {}

  // Deletes a project.
  // Request headers: user-id: <User ID>
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {}

  // Export a project.
  // Request headers: user-id: <User ID>
  rpc ExportProject(ExportProjectRequest) returns (ExportProjectResponse) {}
}

// Core Project messages
message Project {
  // Project ID
  string id = 1;

  // Workspace ID
  string workspace_id = 2;

  // Scene ID
  string scene_id = 3;

  // Story
  repeated Story stories = 4;

  // Project title
  string name = 5;

  // Project description
  string description = 6;

  // Project image (URL link)
  optional string image_url = 7;

  // Type of visualizer (e.g., Cesium)
  Visualizer visualizer = 8;

  // Creation date
  google.protobuf.Timestamp created_at = 9;

  // Last updated date
  google.protobuf.Timestamp updated_at = 10;

  // Currently unused
  bool is_archived = 11;

  // Indicates whether it's a classic or visualizer project type
  bool core_support = 12;

  // Whether the project is marked as a favorite
  bool starred = 13;

  // Whether the project is in the trash
  bool is_deleted = 14;

  // Visibility of the project (e.g., "public", "private")
  string visibility = 15;

  // URL to visualizer project
  string editor_url = 16;

  // Project metadata
  optional ProjectMetadata metadata = 17;

  // Scene Publishment value
  string alias = 18;
  // Scene Publishment value
  PublishmentStatus publishment_status = 19;
  // Scene Publishment value
  optional string published_url = 20;
}

message Story {
  // Story ID
  string id = 1;
  // Story Publishment value
  string story_alias = 2;
  // Story Publishment value
  PublishmentStatus story_publishment_status = 3;
  // Story Publishment value
  optional string story_published_url = 4;
}

message ProjectMetadata {
  // ProjectMetadata id
  string id = 1;
  // Project id
  string project_id = 2;
  // Workspace id
  string workspace_id = 3;
  // Project readme
  optional string readme = 4;
  // Project license
  optional string license = 5;
  // Project topics
  optional string topics = 6;

  // Project import status â€” if PROCESSING, data should not be retrieved
  ProjectImportStatus import_status = 7;
  // ProjectMetadata created date
  google.protobuf.Timestamp created_at = 8;
  // ProjectMetadata updated date
  google.protobuf.Timestamp updated_at = 9;
}

enum Visualizer {
  VISUALIZER_UNSPECIFIED = 0;
  VISUALIZER_CESIUM = 1;
  VISUALIZER_CESIUM_BETA = 2;
}

enum ProjectImportStatus {
  NONE = 0;
  PROCESSING = 1;
  FAIL = 2;
  SUCCESS = 3;
}

enum PublishmentStatus {
  PUBLISHMENT_STATUS_UNSPECIFIED = 0;

  // The project is published and publicly accessible.
  PUBLISHMENT_STATUS_PUBLIC = 1;

  // The project is published with limited access.
  PUBLISHMENT_STATUS_LIMITED = 2;

  // The project is unpublished (web files have been deleted).
  PUBLISHMENT_STATUS_PRIVATE = 3;
}

// Pagination
message Pagination {
  optional int32 first = 1;
  optional int32 last = 2;
  optional string after = 3;
  optional string before = 4;
}

enum ProjectSortField {
  PROJECT_SORT_FIELD_UNSPECIFIED = 0;
  UPDATEDAT = 1;
  NAME = 2;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  ASC = 1;
  DESC = 2;
}

message ProjectSort {
  ProjectSortField field = 1;
  SortDirection direction = 2;
}

message PageInfo {
  int64 total_count = 1;
  optional string start_cursor = 2;
  optional string end_cursor = 3;
  bool has_next_page = 4;
  bool has_previous_page = 5;
}

// If the authenticated flag is true, private items will also be included in the
// response. However, deleted items are excluded.
message GetProjectListRequest {
  // Workspace ID
  optional string workspace_id = 1;
  // Authenticated Flag
  bool authenticated = 2;
  // Keyword search
  optional string keyword = 3;
  // Sort options
  optional ProjectSort sort = 4;
  // Pagination info
  optional Pagination pagination = 5;
}

// Retrieves a project regardless of authentication.
// Note: Call this only if the user is allowed to view the project.
message GetProjectRequest {
  // Project ID
  string project_id = 1;
}

// Find a project by alias.
message GetProjectByAliasRequest {
  // Scene alias
  string alias = 1;
}

// Determines if an alias is valid.
message ValidateProjectAliasRequest {
  // Project ID
  optional string project_id = 1;
  // Scene alias
  string alias = 2;
}

// Creates a new project.
// Cannot be created under a team the user does not belong to.
message CreateProjectRequest {
  // Workspace ID
  string workspace_id = 1;

  // Specify VISUALIZER_CESIUM
  Visualizer visualizer = 2;

  // Project title
  optional string name = 3;

  // Project description
  optional string description = 4;

  // Set to true
  optional bool core_support = 5;

  // Visibility of the project (e.g., "public", "private")
  optional string visibility = 6;
}

// Update project fields.
// Only the project owner can operate this
message UpdateProjectRequest {
  // Project ID (required)
  string project_id = 1;

  // Project basic info (optional)
  optional string name = 2;
  optional string description = 3;
  optional bool archived = 4;
  optional string image_url = 5;
  optional bool delete_image_url = 6;
  optional string scene_id = 7;
  optional bool starred = 8;
  optional bool deleted = 9;
  optional string visibility = 10;

  // Publishment settings (optional)
  optional string public_title = 11;
  optional string public_description = 12;
  optional string public_image = 13;
  optional bool public_no_index = 14;
  optional bool delete_public_image = 15;
  optional bool is_basic_auth_active = 16;
  optional string basic_auth_username = 17;
  optional string basic_auth_password = 18;
  optional bool enable_ga = 19;
  optional string tracking_id = 20;
}

// Update project publish fields.
// Only the project owner can operate this
message PublishProjectRequest {
  // Project ID (required)
  string project_id = 1;
  // Scene Publishment alias
  optional string alias = 2;
  // Scene Publishment status
  PublishmentStatus publishment_status = 3;
}

// Updates a new project metadata.
// Cannot be updated under a team the user does not belong to.
message UpdateProjectMetadataRequest {
  // Project ID
  string project_id = 1;
  // Project readme
  optional string readme = 2;
  // Project license
  optional string license = 3;
  // Project topics
  optional string topics = 4;
}

// Deletes a project.
// This is a physical deletion, not a logical deletion. Data cannot be restored.
// Only the project owner can operate this
message DeleteProjectRequest {
  // Project ID
  string project_id = 1;
}

// Export a project.
message ExportProjectRequest {
  // Project ID
  string project_id = 1;
}

// Response messages
message GetProjectResponse {
  // Project
  Project project = 1;
}

// Response messages
message GetProjectListResponse {
  // Project List
  repeated Project projects = 1;
  // PageInfo
  PageInfo page_info = 2;
  // TotalCount
  int32 total_count = 3;
}

// Response messages
message CreateProjectResponse {
  // Project
  Project project = 1;
}

// Response messages
message UpdateProjectResponse {
  // Project
  Project project = 1;
}

// Response messages
message PublishProjectResponse {
  // Project
  Project project = 1;
}

// Response messages
message UpdateProjectMetadataResponse {
  // Project metadata
  ProjectMetadata metadata = 1;
}

// Response messages
message DeleteProjectResponse {
  // Project ID
  string project_id = 1;
}

// Response messages
message ExportProjectResponse {
  // Project Export zip file download url
  string project_data_path = 1;
}

// Response messages
message GetProjectByAliasResponse {
  // Project
  Project project = 1;
}

// Response messages
message ValidateProjectAliasResponse {
  // Project ID
  optional string project_id = 1;
  // Scene alias available
  bool available = 2;
  // Error message
  optional string error_message = 3;
}
