// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: schemas/internalapi/v1/schema.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReEarthVisualizer_GetProjectList_FullMethodName           = "/reearth.visualizer.v1.ReEarthVisualizer/GetProjectList"
	ReEarthVisualizer_GetPublicProjectList_FullMethodName     = "/reearth.visualizer.v1.ReEarthVisualizer/GetPublicProjectList"
	ReEarthVisualizer_GetProject_FullMethodName               = "/reearth.visualizer.v1.ReEarthVisualizer/GetProject"
	ReEarthVisualizer_GetProjectByAlias_FullMethodName        = "/reearth.visualizer.v1.ReEarthVisualizer/GetProjectByAlias"
	ReEarthVisualizer_ValidateProjectAlias_FullMethodName     = "/reearth.visualizer.v1.ReEarthVisualizer/ValidateProjectAlias"
	ReEarthVisualizer_ValidateSceneAlias_FullMethodName       = "/reearth.visualizer.v1.ReEarthVisualizer/ValidateSceneAlias"
	ReEarthVisualizer_CreateProject_FullMethodName            = "/reearth.visualizer.v1.ReEarthVisualizer/CreateProject"
	ReEarthVisualizer_UpdateProject_FullMethodName            = "/reearth.visualizer.v1.ReEarthVisualizer/UpdateProject"
	ReEarthVisualizer_PublishProject_FullMethodName           = "/reearth.visualizer.v1.ReEarthVisualizer/PublishProject"
	ReEarthVisualizer_UpdateProjectMetadata_FullMethodName    = "/reearth.visualizer.v1.ReEarthVisualizer/UpdateProjectMetadata"
	ReEarthVisualizer_DeleteProject_FullMethodName            = "/reearth.visualizer.v1.ReEarthVisualizer/DeleteProject"
	ReEarthVisualizer_ExportProject_FullMethodName            = "/reearth.visualizer.v1.ReEarthVisualizer/ExportProject"
	ReEarthVisualizer_GetProjectByProjectAlias_FullMethodName = "/reearth.visualizer.v1.ReEarthVisualizer/GetProjectByProjectAlias"
	ReEarthVisualizer_UpdateByProjectAlias_FullMethodName     = "/reearth.visualizer.v1.ReEarthVisualizer/UpdateByProjectAlias"
	ReEarthVisualizer_DeleteByProjectAlias_FullMethodName     = "/reearth.visualizer.v1.ReEarthVisualizer/DeleteByProjectAlias"
)

// ReEarthVisualizerClient is the client API for ReEarthVisualizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReEarthVisualizerClient interface {
	// Retrieves the list of projects the user can access.
	// Request headers: user-id: <User ID>
	GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error)
	// Retrieves all public projects (no authentication required).
	GetPublicProjectList(ctx context.Context, in *GetPublicProjectListRequest, opts ...grpc.CallOption) (*GetPublicProjectListResponse, error)
	// Retrieves a specific project regardless of authentication.
	// Request headers: user-id: <User ID>
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// Find a project by alias.
	// Request headers: user-id: <User ID>
	GetProjectByAlias(ctx context.Context, in *GetProjectByAliasRequest, opts ...grpc.CallOption) (*GetProjectByAliasResponse, error)
	// Determines if an project alias is valid.
	// Request headers: user-id: <User ID>
	ValidateProjectAlias(ctx context.Context, in *ValidateProjectAliasRequest, opts ...grpc.CallOption) (*ValidateProjectAliasResponse, error)
	// Determines if an scene alias is valid.
	// Request headers: user-id: <User ID>
	ValidateSceneAlias(ctx context.Context, in *ValidateSceneAliasRequest, opts ...grpc.CallOption) (*ValidateSceneAliasResponse, error)
	// Creates a new project in the specified workspace.
	// Request headers: user-id: <User ID>
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Update a project.
	// Request headers: user-id: <User ID>
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// Publish a project.
	// Request headers: user-id: <User ID>
	PublishProject(ctx context.Context, in *PublishProjectRequest, opts ...grpc.CallOption) (*PublishProjectResponse, error)
	// Updates a new project metadata in the specified workspace.
	// Request headers: user-id: <User ID>
	UpdateProjectMetadata(ctx context.Context, in *UpdateProjectMetadataRequest, opts ...grpc.CallOption) (*UpdateProjectMetadataResponse, error)
	// Deletes a project.
	// Request headers: user-id: <User ID>
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Export a project.
	// Request headers: user-id: <User ID>
	ExportProject(ctx context.Context, in *ExportProjectRequest, opts ...grpc.CallOption) (*ExportProjectResponse, error)
	// Find a project by project alias.
	// Request headers: user-id: <User ID>
	GetProjectByProjectAlias(ctx context.Context, in *GetProjectByProjectAliasRequest, opts ...grpc.CallOption) (*GetProjectByProjectAliasResponse, error)
	// Update a project by project alias.
	// Request headers: user-id: <User ID>
	UpdateByProjectAlias(ctx context.Context, in *UpdateByProjectAliasRequest, opts ...grpc.CallOption) (*UpdateByProjectAliasResponse, error)
	// Deletes a project by project alias.
	// Request headers: user-id: <User ID>
	DeleteByProjectAlias(ctx context.Context, in *DeleteByProjectAliasRequest, opts ...grpc.CallOption) (*DeleteByProjectAliasResponse, error)
}

type reEarthVisualizerClient struct {
	cc grpc.ClientConnInterface
}

func NewReEarthVisualizerClient(cc grpc.ClientConnInterface) ReEarthVisualizerClient {
	return &reEarthVisualizerClient{cc}
}

func (c *reEarthVisualizerClient) GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectListResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_GetProjectList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) GetPublicProjectList(ctx context.Context, in *GetPublicProjectListRequest, opts ...grpc.CallOption) (*GetPublicProjectListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPublicProjectListResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_GetPublicProjectList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) GetProjectByAlias(ctx context.Context, in *GetProjectByAliasRequest, opts ...grpc.CallOption) (*GetProjectByAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectByAliasResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_GetProjectByAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) ValidateProjectAlias(ctx context.Context, in *ValidateProjectAliasRequest, opts ...grpc.CallOption) (*ValidateProjectAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateProjectAliasResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_ValidateProjectAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) ValidateSceneAlias(ctx context.Context, in *ValidateSceneAliasRequest, opts ...grpc.CallOption) (*ValidateSceneAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSceneAliasResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_ValidateSceneAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_CreateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) PublishProject(ctx context.Context, in *PublishProjectRequest, opts ...grpc.CallOption) (*PublishProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_PublishProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) UpdateProjectMetadata(ctx context.Context, in *UpdateProjectMetadataRequest, opts ...grpc.CallOption) (*UpdateProjectMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectMetadataResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_UpdateProjectMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_DeleteProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) ExportProject(ctx context.Context, in *ExportProjectRequest, opts ...grpc.CallOption) (*ExportProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportProjectResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_ExportProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) GetProjectByProjectAlias(ctx context.Context, in *GetProjectByProjectAliasRequest, opts ...grpc.CallOption) (*GetProjectByProjectAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectByProjectAliasResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_GetProjectByProjectAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) UpdateByProjectAlias(ctx context.Context, in *UpdateByProjectAliasRequest, opts ...grpc.CallOption) (*UpdateByProjectAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateByProjectAliasResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_UpdateByProjectAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reEarthVisualizerClient) DeleteByProjectAlias(ctx context.Context, in *DeleteByProjectAliasRequest, opts ...grpc.CallOption) (*DeleteByProjectAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteByProjectAliasResponse)
	err := c.cc.Invoke(ctx, ReEarthVisualizer_DeleteByProjectAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReEarthVisualizerServer is the server API for ReEarthVisualizer service.
// All implementations must embed UnimplementedReEarthVisualizerServer
// for forward compatibility.
type ReEarthVisualizerServer interface {
	// Retrieves the list of projects the user can access.
	// Request headers: user-id: <User ID>
	GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error)
	// Retrieves all public projects (no authentication required).
	GetPublicProjectList(context.Context, *GetPublicProjectListRequest) (*GetPublicProjectListResponse, error)
	// Retrieves a specific project regardless of authentication.
	// Request headers: user-id: <User ID>
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// Find a project by alias.
	// Request headers: user-id: <User ID>
	GetProjectByAlias(context.Context, *GetProjectByAliasRequest) (*GetProjectByAliasResponse, error)
	// Determines if an project alias is valid.
	// Request headers: user-id: <User ID>
	ValidateProjectAlias(context.Context, *ValidateProjectAliasRequest) (*ValidateProjectAliasResponse, error)
	// Determines if an scene alias is valid.
	// Request headers: user-id: <User ID>
	ValidateSceneAlias(context.Context, *ValidateSceneAliasRequest) (*ValidateSceneAliasResponse, error)
	// Creates a new project in the specified workspace.
	// Request headers: user-id: <User ID>
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Update a project.
	// Request headers: user-id: <User ID>
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// Publish a project.
	// Request headers: user-id: <User ID>
	PublishProject(context.Context, *PublishProjectRequest) (*PublishProjectResponse, error)
	// Updates a new project metadata in the specified workspace.
	// Request headers: user-id: <User ID>
	UpdateProjectMetadata(context.Context, *UpdateProjectMetadataRequest) (*UpdateProjectMetadataResponse, error)
	// Deletes a project.
	// Request headers: user-id: <User ID>
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Export a project.
	// Request headers: user-id: <User ID>
	ExportProject(context.Context, *ExportProjectRequest) (*ExportProjectResponse, error)
	// Find a project by project alias.
	// Request headers: user-id: <User ID>
	GetProjectByProjectAlias(context.Context, *GetProjectByProjectAliasRequest) (*GetProjectByProjectAliasResponse, error)
	// Update a project by project alias.
	// Request headers: user-id: <User ID>
	UpdateByProjectAlias(context.Context, *UpdateByProjectAliasRequest) (*UpdateByProjectAliasResponse, error)
	// Deletes a project by project alias.
	// Request headers: user-id: <User ID>
	DeleteByProjectAlias(context.Context, *DeleteByProjectAliasRequest) (*DeleteByProjectAliasResponse, error)
	mustEmbedUnimplementedReEarthVisualizerServer()
}

// UnimplementedReEarthVisualizerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReEarthVisualizerServer struct{}

func (UnimplementedReEarthVisualizerServer) GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedReEarthVisualizerServer) GetPublicProjectList(context.Context, *GetPublicProjectListRequest) (*GetPublicProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicProjectList not implemented")
}
func (UnimplementedReEarthVisualizerServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedReEarthVisualizerServer) GetProjectByAlias(context.Context, *GetProjectByAliasRequest) (*GetProjectByAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByAlias not implemented")
}
func (UnimplementedReEarthVisualizerServer) ValidateProjectAlias(context.Context, *ValidateProjectAliasRequest) (*ValidateProjectAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateProjectAlias not implemented")
}
func (UnimplementedReEarthVisualizerServer) ValidateSceneAlias(context.Context, *ValidateSceneAliasRequest) (*ValidateSceneAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSceneAlias not implemented")
}
func (UnimplementedReEarthVisualizerServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedReEarthVisualizerServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedReEarthVisualizerServer) PublishProject(context.Context, *PublishProjectRequest) (*PublishProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishProject not implemented")
}
func (UnimplementedReEarthVisualizerServer) UpdateProjectMetadata(context.Context, *UpdateProjectMetadataRequest) (*UpdateProjectMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectMetadata not implemented")
}
func (UnimplementedReEarthVisualizerServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedReEarthVisualizerServer) ExportProject(context.Context, *ExportProjectRequest) (*ExportProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportProject not implemented")
}
func (UnimplementedReEarthVisualizerServer) GetProjectByProjectAlias(context.Context, *GetProjectByProjectAliasRequest) (*GetProjectByProjectAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByProjectAlias not implemented")
}
func (UnimplementedReEarthVisualizerServer) UpdateByProjectAlias(context.Context, *UpdateByProjectAliasRequest) (*UpdateByProjectAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByProjectAlias not implemented")
}
func (UnimplementedReEarthVisualizerServer) DeleteByProjectAlias(context.Context, *DeleteByProjectAliasRequest) (*DeleteByProjectAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByProjectAlias not implemented")
}
func (UnimplementedReEarthVisualizerServer) mustEmbedUnimplementedReEarthVisualizerServer() {}
func (UnimplementedReEarthVisualizerServer) testEmbeddedByValue()                           {}

// UnsafeReEarthVisualizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReEarthVisualizerServer will
// result in compilation errors.
type UnsafeReEarthVisualizerServer interface {
	mustEmbedUnimplementedReEarthVisualizerServer()
}

func RegisterReEarthVisualizerServer(s grpc.ServiceRegistrar, srv ReEarthVisualizerServer) {
	// If the following call pancis, it indicates UnimplementedReEarthVisualizerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReEarthVisualizer_ServiceDesc, srv)
}

func _ReEarthVisualizer_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_GetProjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).GetProjectList(ctx, req.(*GetProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_GetPublicProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).GetPublicProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_GetPublicProjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).GetPublicProjectList(ctx, req.(*GetPublicProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_GetProjectByAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).GetProjectByAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_GetProjectByAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).GetProjectByAlias(ctx, req.(*GetProjectByAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_ValidateProjectAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateProjectAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).ValidateProjectAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_ValidateProjectAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).ValidateProjectAlias(ctx, req.(*ValidateProjectAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_ValidateSceneAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSceneAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).ValidateSceneAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_ValidateSceneAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).ValidateSceneAlias(ctx, req.(*ValidateSceneAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_PublishProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).PublishProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_PublishProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).PublishProject(ctx, req.(*PublishProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_UpdateProjectMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).UpdateProjectMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_UpdateProjectMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).UpdateProjectMetadata(ctx, req.(*UpdateProjectMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_ExportProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).ExportProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_ExportProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).ExportProject(ctx, req.(*ExportProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_GetProjectByProjectAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectByProjectAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).GetProjectByProjectAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_GetProjectByProjectAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).GetProjectByProjectAlias(ctx, req.(*GetProjectByProjectAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_UpdateByProjectAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateByProjectAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).UpdateByProjectAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_UpdateByProjectAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).UpdateByProjectAlias(ctx, req.(*UpdateByProjectAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReEarthVisualizer_DeleteByProjectAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByProjectAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReEarthVisualizerServer).DeleteByProjectAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReEarthVisualizer_DeleteByProjectAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReEarthVisualizerServer).DeleteByProjectAlias(ctx, req.(*DeleteByProjectAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReEarthVisualizer_ServiceDesc is the grpc.ServiceDesc for ReEarthVisualizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReEarthVisualizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reearth.visualizer.v1.ReEarthVisualizer",
	HandlerType: (*ReEarthVisualizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectList",
			Handler:    _ReEarthVisualizer_GetProjectList_Handler,
		},
		{
			MethodName: "GetPublicProjectList",
			Handler:    _ReEarthVisualizer_GetPublicProjectList_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ReEarthVisualizer_GetProject_Handler,
		},
		{
			MethodName: "GetProjectByAlias",
			Handler:    _ReEarthVisualizer_GetProjectByAlias_Handler,
		},
		{
			MethodName: "ValidateProjectAlias",
			Handler:    _ReEarthVisualizer_ValidateProjectAlias_Handler,
		},
		{
			MethodName: "ValidateSceneAlias",
			Handler:    _ReEarthVisualizer_ValidateSceneAlias_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ReEarthVisualizer_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ReEarthVisualizer_UpdateProject_Handler,
		},
		{
			MethodName: "PublishProject",
			Handler:    _ReEarthVisualizer_PublishProject_Handler,
		},
		{
			MethodName: "UpdateProjectMetadata",
			Handler:    _ReEarthVisualizer_UpdateProjectMetadata_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ReEarthVisualizer_DeleteProject_Handler,
		},
		{
			MethodName: "ExportProject",
			Handler:    _ReEarthVisualizer_ExportProject_Handler,
		},
		{
			MethodName: "GetProjectByProjectAlias",
			Handler:    _ReEarthVisualizer_GetProjectByProjectAlias_Handler,
		},
		{
			MethodName: "UpdateByProjectAlias",
			Handler:    _ReEarthVisualizer_UpdateByProjectAlias_Handler,
		},
		{
			MethodName: "DeleteByProjectAlias",
			Handler:    _ReEarthVisualizer_DeleteByProjectAlias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schemas/internalapi/v1/schema.proto",
}
