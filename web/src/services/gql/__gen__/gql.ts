/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment WidgetAlignSystemFragment on WidgetAlignSystem {\n    outer {\n      ...WidgetZoneFragment\n    }\n    inner {\n      ...WidgetZoneFragment\n    }\n  }\n\n  fragment WidgetZoneFragment on WidgetZone {\n    left {\n      ...WidgetSectionFragment\n    }\n    center {\n      ...WidgetSectionFragment\n    }\n    right {\n      ...WidgetSectionFragment\n    }\n  }\n\n  fragment WidgetSectionFragment on WidgetSection {\n    top {\n      ...WidgetAreaFragment\n    }\n    middle {\n      ...WidgetAreaFragment\n    }\n    bottom {\n      ...WidgetAreaFragment\n    }\n  }\n\n  fragment WidgetAreaFragment on WidgetArea {\n    widgetIds\n    align\n    padding {\n      top\n      bottom\n      left\n      right\n    }\n    gap\n    centered\n    background\n  }\n": types.WidgetAlignSystemFragmentFragmentDoc,
    "\n  fragment DatasetFragment on Dataset {\n    id\n    source\n    schemaId\n    fields {\n      fieldId\n      type\n      value\n      field {\n        id\n        name\n      }\n    }\n    name\n  }\n": types.DatasetFragmentFragmentDoc,
    "\n  fragment FeatureFragment on Feature {\n    id\n    type\n    properties\n    geometry {\n      ... on Point {\n        type\n        pointCoordinates\n      }\n      ... on LineString {\n        type\n        lineStringCoordinates\n      }\n      ... on Polygon {\n        type\n        polygonCoordinates\n      }\n      ... on MultiPolygon {\n        type\n        multiPolygonCoordinates\n      }\n      ... on GeometryCollection {\n        type\n        geometries {\n          ... on Point {\n            type\n            pointCoordinates\n          }\n          ... on LineString {\n            type\n            lineStringCoordinates\n          }\n          ... on Polygon {\n            type\n            polygonCoordinates\n          }\n          ... on MultiPolygon {\n            type\n            multiPolygonCoordinates\n          }\n        }\n      }\n    }\n  }\n": types.FeatureFragmentFragmentDoc,
    "\n  fragment InfoboxFragment on Infobox {\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    fields {\n      id\n      pluginId\n      extensionId\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n\n  fragment MergedInfoboxFragment on MergedInfobox {\n    property {\n      ...MergedPropertyFragment\n    }\n    fields {\n      originalId\n      pluginId\n      extensionId\n      property {\n        ...MergedPropertyFragment\n      }\n    }\n  }\n\n  \n": types.InfoboxFragmentFragmentDoc,
    "\n  fragment LayerSystemLayer on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n      layers {\n        id\n      }\n    }\n    ... on LayerItem {\n      linkedDatasetId\n    }\n  }\n\n  fragment LayerSystemLayer1 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer\n      }\n    }\n  }\n\n  fragment LayerSystemLayer2 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer1\n      }\n    }\n  }\n\n  fragment LayerSystemLayer3 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer2\n      }\n    }\n  }\n\n  fragment LayerSystemLayer4 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer3\n      }\n    }\n  }\n\n  fragment LayerSystemLayer5 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer4\n      }\n    }\n  }\n": types.LayerSystemLayerFragmentDoc,
    "\n  fragment EarthLayerCommon on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    scenePlugin {\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    tags {\n      tagId\n      tag {\n        id\n        label\n      }\n      ... on LayerTagGroup {\n        children {\n          tagId\n          tag {\n            id\n            label\n          }\n        }\n      }\n    }\n    infobox {\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n      fields {\n        id\n        pluginId\n        extensionId\n        propertyId\n        scenePlugin {\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n      layers {\n        id\n      }\n    }\n  }\n\n  fragment EarthLayerItem on LayerItem {\n    id\n    linkedDatasetId\n    scenePlugin {\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n\n  fragment EarthLayer on Layer {\n    id\n    ...EarthLayerCommon\n    ...EarthLayerItem\n  }\n\n  fragment EarthLayer1 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer\n      }\n    }\n  }\n\n  fragment EarthLayer2 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer1\n      }\n    }\n  }\n\n  fragment EarthLayer3 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer2\n      }\n    }\n  }\n\n  fragment EarthLayer4 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer3\n      }\n    }\n  }\n\n  fragment EarthLayer5 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer4\n      }\n    }\n  }\n\n  \n": types.EarthLayerCommonFragmentDoc,
    "\n  fragment LayerFragment on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    property {\n      id\n      ...PropertyFragment\n    }\n    infobox {\n      ...InfoboxFragment\n    }\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n    }\n    ... on LayerItem {\n      linkedDatasetId\n      merged {\n        parentId\n        property {\n          ...MergedPropertyFragment\n        }\n        infobox {\n          ...MergedInfoboxFragment\n        }\n      }\n    }\n  }\n\n  fragment Layer0Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n      }\n    }\n  }\n\n  fragment Layer1Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n      }\n    }\n  }\n\n  fragment Layer2Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer3Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer4Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n                ... on LayerGroup {\n                  layers {\n                    id\n                    ...LayerFragment\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer5Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n                ... on LayerGroup {\n                  layers {\n                    id\n                    ...LayerFragment\n                    ... on LayerGroup {\n                      layers {\n                        id\n                        ...LayerFragment\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  \n": types.LayerFragmentFragmentDoc,
    "\n  fragment NLSLayerCommon on NLSLayer {\n    id\n    layerType\n    sceneId\n    config\n    title\n    visible\n    infobox {\n      sceneId\n      layerId\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n      blocks {\n        id\n        pluginId\n        extensionId\n        propertyId\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n    isSketch\n    sketch {\n      customPropertySchema\n      featureCollection {\n        type\n        features {\n          ...FeatureFragment\n        }\n      }\n    }\n    ... on NLSLayerGroup {\n      children {\n        id\n      }\n    }\n  }\n": types.NlsLayerCommonFragmentDoc,
    "\n  fragment NLSLayerStyle on Style {\n    id\n    name\n    value\n  }\n": types.NlsLayerStyleFragmentDoc,
    "\n  fragment PluginFragment on Plugin {\n    id\n    name\n    extensions {\n      extensionId\n      description\n      name\n      translatedDescription(lang: $lang)\n      translatedName(lang: $lang)\n      icon\n      singleOnly\n      type\n      widgetLayout {\n        extendable {\n          vertically\n          horizontally\n        }\n        extended\n        floating\n        defaultLocation {\n          zone\n          section\n          area\n        }\n      }\n    }\n  }\n": types.PluginFragmentFragmentDoc,
    "\n  fragment ProjectFragment on Project {\n    id\n    name\n    description\n    imageUrl\n    isArchived\n    isBasicAuthActive\n    basicAuthUsername\n    basicAuthPassword\n    publicTitle\n    publicDescription\n    publicImage\n    alias\n    enableGa\n    trackingId\n    publishmentStatus\n    updatedAt\n    createdAt\n    coreSupport\n  }\n": types.ProjectFragmentFragmentDoc,
    "\n  fragment PropertySchemaFieldFragment on PropertySchemaField {\n    fieldId\n    title\n    description\n    translatedTitle(lang: $lang)\n    translatedDescription(lang: $lang)\n    prefix\n    suffix\n    type\n    defaultValue\n    ui\n    min\n    max\n    choices {\n      key\n      icon\n      title\n      translatedTitle(lang: $lang)\n    }\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n  }\n\n  fragment PropertySchemaGroupFragment on PropertySchemaGroup {\n    schemaGroupId\n    title\n    collection\n    translatedTitle(lang: $lang)\n    isList\n    representativeFieldId\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n    fields {\n      ...PropertySchemaFieldFragment\n    }\n  }\n\n  fragment PropertyFieldFragment on PropertyField {\n    id\n    fieldId\n    type\n    value\n    links {\n      ...PropertyFieldLink\n    }\n  }\n\n  fragment PropertyGroupFragment on PropertyGroup {\n    id\n    schemaGroupId\n    fields {\n      ...PropertyFieldFragment\n    }\n  }\n\n  fragment PropertyItemFragment on PropertyItem {\n    ... on PropertyGroupList {\n      id\n      schemaGroupId\n      groups {\n        ...PropertyGroupFragment\n      }\n    }\n    ... on PropertyGroup {\n      ...PropertyGroupFragment\n    }\n  }\n\n  fragment PropertyFragmentWithoutSchema on Property {\n    id\n    items {\n      ...PropertyItemFragment\n    }\n  }\n\n  fragment PropertyFragment on Property {\n    id\n    ...PropertyFragmentWithoutSchema\n    schema {\n      id\n      groups {\n        ...PropertySchemaGroupFragment\n      }\n    }\n  }\n\n  fragment MergedPropertyGroupCommonFragment on MergedPropertyGroup {\n    schemaGroupId\n    fields {\n      fieldId\n      type\n      actualValue\n      overridden\n      links {\n        ...PropertyFieldLink\n      }\n    }\n  }\n\n  fragment MergedPropertyGroupFragment on MergedPropertyGroup {\n    ...MergedPropertyGroupCommonFragment\n    groups {\n      ...MergedPropertyGroupCommonFragment\n    }\n  }\n\n  fragment MergedPropertyFragmentWithoutSchema on MergedProperty {\n    originalId\n    parentId\n    linkedDatasetId\n    groups {\n      ...MergedPropertyGroupFragment\n    }\n  }\n\n  fragment MergedPropertyFragment on MergedProperty {\n    ...MergedPropertyFragmentWithoutSchema\n    schema {\n      id\n    }\n  }\n\n  fragment PropertyFieldLink on PropertyFieldLink {\n    datasetId\n    datasetSchemaId\n    datasetSchemaFieldId\n  }\n": types.PropertySchemaFieldFragmentFragmentDoc,
    "\n  fragment StoryFragment on Story {\n    id\n    title\n    panelPosition\n    bgColor\n    isBasicAuthActive\n    basicAuthUsername\n    basicAuthPassword\n    alias\n    publicTitle\n    publicDescription\n    publishmentStatus\n    publicImage\n    publicNoIndex\n    pages {\n      ...StoryPageFragment\n    }\n  }\n": types.StoryFragmentFragmentDoc,
    "\n  fragment StoryPageFragment on StoryPage {\n    id\n    title\n    swipeable\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    layersIds\n    blocks {\n      id\n      pluginId\n      extensionId\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n": types.StoryPageFragmentFragmentDoc,
    "\n  query GetAssets($teamId: ID!, $sort: AssetSortType, $keyword: String, $pagination: Pagination) {\n    assets(teamId: $teamId, keyword: $keyword, sort: $sort, pagination: $pagination) {\n      edges {\n        cursor\n        node {\n          id\n          teamId\n          name\n          size\n          url\n          contentType\n        }\n      }\n      nodes {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n": types.GetAssetsDocument,
    "\n  mutation CreateAsset($teamId: ID!, $file: Upload!) {\n    createAsset(input: { teamId: $teamId, file: $file }) {\n      asset {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n    }\n  }\n": types.CreateAssetDocument,
    "\n  mutation RemoveAsset($assetId: ID!) {\n    removeAsset(input: { assetId: $assetId }) {\n      assetId\n    }\n  }\n": types.RemoveAssetDocument,
    "\n  mutation AddGeoJSONFeature($input: AddGeoJSONFeatureInput!) {\n    addGeoJSONFeature(input: $input) {\n      id\n\t\t  type\n\t\t  properties\n    }\n  }\n": types.AddGeoJsonFeatureDocument,
    "\n  mutation UpdateGeoJSONFeature($input: UpdateGeoJSONFeatureInput!) {\n    updateGeoJSONFeature(input: $input) {\n      id\n\t\t  type\n\t\t  properties\n    }\n  }\n": types.UpdateGeoJsonFeatureDocument,
    "\n  mutation CreateNLSInfobox($input: CreateNLSInfoboxInput!) {\n    createNLSInfobox(input: $input) {\n      layer{\n        id\n      }\n    }\n  }\n": types.CreateNlsInfoboxDocument,
    "\n  mutation RemoveNLSInfobox($input: RemoveNLSInfoboxInput!) {\n    removeNLSInfobox(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n": types.RemoveNlsInfoboxDocument,
    "\n  mutation AddNLSInfoboxBlock($input: AddNLSInfoboxBlockInput!) {\n    addNLSInfoboxBlock(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n": types.AddNlsInfoboxBlockDocument,
    "\n  mutation MoveNLSInfoboxBlock($input: MoveNLSInfoboxBlockInput!) {\n    moveNLSInfoboxBlock(input: $input) {\n      index\n      infoboxBlockId\n      layer {\n        id\n      }\n    }\n  }\n": types.MoveNlsInfoboxBlockDocument,
    "\n  mutation RemoveNLSInfoboxBlock($input: RemoveNLSInfoboxBlockInput!) {\n    removeNLSInfoboxBlock(input: $input) {\n      infoboxBlockId\n      layer {\n        id\n      }\n    }\n  }\n": types.RemoveNlsInfoboxBlockDocument,
    "\n  mutation AddNLSLayerSimple($input: AddNLSLayerSimpleInput!) {\n    addNLSLayerSimple(input: $input) {\n      layers {\n        id\n      }\n    }\n  }\n": types.AddNlsLayerSimpleDocument,
    "\n  mutation UpdateNLSLayer($input: UpdateNLSLayerInput!) {\n    updateNLSLayer(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n": types.UpdateNlsLayerDocument,
    "\n  mutation RemoveNLSLayer($input: RemoveNLSLayerInput!) {\n    removeNLSLayer(input: $input) {\n      layerId\n    }\n  }\n": types.RemoveNlsLayerDocument,
    "\n  mutation AddStyle($input: AddStyleInput!) {\n    addStyle(input: $input) {\n      style {\n        id\n        name\n      }\n    }\n  }\n": types.AddStyleDocument,
    "\n  mutation UpdateStyle($input: UpdateStyleInput!) {\n    updateStyle(input: $input) {\n      style {\n        id\n        name\n      }\n    }\n  }\n": types.UpdateStyleDocument,
    "\n  mutation RemoveStyle($input: RemoveStyleInput!) {\n    removeStyle(input: $input) {\n      styleId\n    }\n  }\n": types.RemoveStyleDocument,
    "\n  mutation InstallPlugin($sceneId: ID!, $pluginId: ID!) {\n    installPlugin(input: { sceneId: $sceneId, pluginId: $pluginId }) {\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n": types.InstallPluginDocument,
    "\n  mutation UpgradePlugin($sceneId: ID!, $pluginId: ID!, $toPluginId: ID!) {\n    upgradePlugin(input: { sceneId: $sceneId, pluginId: $pluginId, toPluginId: $toPluginId }) {\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n": types.UpgradePluginDocument,
    "\n  mutation UploadPlugin($sceneId: ID!, $file: Upload, $url: URL) {\n    uploadPlugin(input: { sceneId: $sceneId, file: $file, url: $url }) {\n      plugin {\n        id\n        name\n        version\n        description\n        author\n      }\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n": types.UploadPluginDocument,
    "\n  mutation UninstallPlugin($sceneId: ID!, $pluginId: ID!) {\n    uninstallPlugin(input: { sceneId: $sceneId, pluginId: $pluginId }) {\n      pluginId\n    }\n  }\n": types.UninstallPluginDocument,
    "\n  query GetProject($projectId: ID!) {\n    node(id: $projectId, type: PROJECT) {\n      id\n      ... on Project {\n        ...ProjectFragment\n        scene {\n          id\n        }\n      }\n    }\n  }\n": types.GetProjectDocument,
    "\n  query GetProjects($teamId: ID!, $first: Int, $last: Int, $after: Cursor, $before: Cursor) {\n    projects(teamId: $teamId, first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          id\n          ...ProjectFragment\n          scene {\n            id\n          }\n        }\n      }\n      nodes {\n        id\n        ...ProjectFragment\n        scene {\n          id\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n\n\n": types.GetProjectsDocument,
    "\n  query CheckProjectAlias($alias: String!) {\n    checkProjectAlias(alias: $alias) {\n      alias\n      available\n    }\n  }\n": types.CheckProjectAliasDocument,
    "\n  mutation CreateProject(\n    $teamId: ID!\n    $visualizer: Visualizer!\n    $name: String!\n    $description: String!\n    $imageUrl: URL\n    $coreSupport: Boolean\n  ) {\n    createProject(\n      input: {\n        teamId: $teamId\n        visualizer: $visualizer\n        name: $name\n        description: $description\n        imageUrl: $imageUrl\n        coreSupport: $coreSupport\n      }\n    ) {\n      project {\n        id\n        name\n        description\n        imageUrl\n        coreSupport\n      }\n    }\n  }\n": types.CreateProjectDocument,
    "\n  mutation UpdateProject(\n    $projectId: ID!\n    $name: String\n    $description: String\n    $imageUrl: URL\n    $publicTitle: String\n    $publicDescription: String\n    $publicImage: String\n    $deleteImageUrl: Boolean\n    $deletePublicImage: Boolean\n    $enableGa: Boolean\n    $trackingId: String\n  ) {\n    updateProject(\n      input: {\n        projectId: $projectId\n        name: $name\n        description: $description\n        imageUrl: $imageUrl\n        publicTitle: $publicTitle\n        publicDescription: $publicDescription\n        publicImage: $publicImage\n        deleteImageUrl: $deleteImageUrl\n        deletePublicImage: $deletePublicImage\n        enableGa: $enableGa\n        trackingId: $trackingId\n      }\n    ) {\n      project {\n        id\n        ...ProjectFragment\n      }\n    }\n  }\n\n": types.UpdateProjectDocument,
    "\n  mutation UpdateProjectBasicAuth(\n    $projectId: ID!\n    $isBasicAuthActive: Boolean\n    $basicAuthUsername: String\n    $basicAuthPassword: String\n  ) {\n    updateProject(\n      input: {\n        projectId: $projectId\n        isBasicAuthActive: $isBasicAuthActive\n        basicAuthUsername: $basicAuthUsername\n        basicAuthPassword: $basicAuthPassword\n      }\n    ) {\n      project {\n        id\n        name\n        isBasicAuthActive\n        basicAuthUsername\n        basicAuthPassword\n      }\n    }\n  }\n": types.UpdateProjectBasicAuthDocument,
    "\n  mutation UpdateProjectAlias($projectId: ID!, $alias: String!) {\n    updateProject(input: { projectId: $projectId, alias: $alias }) {\n      project {\n        id\n        name\n        alias\n      }\n    }\n  }\n": types.UpdateProjectAliasDocument,
    "\n  mutation PublishProject($projectId: ID!, $alias: String, $status: PublishmentStatus!) {\n    publishProject(input: { projectId: $projectId, alias: $alias, status: $status }) {\n      project {\n        id\n        alias\n        publishmentStatus\n      }\n    }\n  }\n": types.PublishProjectDocument,
    "\n  mutation ArchiveProject($projectId: ID!, $archived: Boolean!) {\n    updateProject(input: { projectId: $projectId, archived: $archived }) {\n      project {\n        id\n        isArchived\n      }\n    }\n  }\n": types.ArchiveProjectDocument,
    "\n  mutation DeleteProject($projectId: ID!) {\n    deleteProject(input: { projectId: $projectId }) {\n      projectId\n    }\n  }\n": types.DeleteProjectDocument,
    "\n  mutation UpdatePropertyValue(\n    $propertyId: ID!\n    $schemaGroupId: ID\n    $itemId: ID\n    $fieldId: ID!\n    $value: Any\n    $type: ValueType!\n    $lang: Lang\n  ) {\n    updatePropertyValue(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n        itemId: $itemId\n        fieldId: $fieldId\n        value: $value\n        type: $type\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n": types.UpdatePropertyValueDocument,
    "\n  mutation AddPropertyItem(\n    $propertyId: ID!\n    $schemaGroupId: ID!\n    $lang: Lang\n  ) {\n    addPropertyItem(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n": types.AddPropertyItemDocument,
    "\n  mutation RemovePropertyItem($propertyId: ID!, $schemaGroupId: ID!, $itemId: ID!, $lang: Lang) {\n    removePropertyItem(\n      input: { propertyId: $propertyId, schemaGroupId: $schemaGroupId, itemId: $itemId }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n": types.RemovePropertyItemDocument,
    "\n  mutation MovePropertyItem(\n    $propertyId: ID!\n    $schemaGroupId: ID!\n    $itemId: ID!\n    $index: Int!\n    $lang: Lang\n  ) {\n    movePropertyItem(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n        itemId: $itemId\n        index: $index\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n": types.MovePropertyItemDocument,
    "\n  query GetScene($sceneId: ID!, $lang: Lang) {\n    node(id: $sceneId, type: SCENE) {\n      id\n      ... on Scene {\n        rootLayerId\n        teamId\n        projectId\n        property {\n          id\n          ...PropertyFragment\n        }\n        clusters {\n          id\n          name\n          propertyId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        tags {\n          id\n          label\n          ... on TagGroup {\n            tags {\n              id\n              label\n            }\n          }\n        }\n        plugins {\n          property {\n            id\n            ...PropertyFragment\n          }\n          plugin {\n            ...PluginFragment\n          }\n        }\n        widgets {\n          id\n          enabled\n          extended\n          pluginId\n          extensionId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        widgetAlignSystem {\n          ...WidgetAlignSystemFragment\n        }\n        stories {\n          ...StoryFragment\n        }\n        newLayers {\n          ...NLSLayerCommon\n        }\n        styles {\n          ...NLSLayerStyle\n        }\n      }\n    }\n  }\n": types.GetSceneDocument,
    "\n  mutation CreateScene($projectId: ID!) {\n    createScene(input: { projectId: $projectId }) {\n      scene {\n        id\n      }\n    }\n  }\n": types.CreateSceneDocument,
    "\n  mutation CreateStory($input: CreateStoryInput!) {\n    createStory(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n": types.CreateStoryDocument,
    "\n  mutation UpdateStory($input: UpdateStoryInput!) {\n    updateStory(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n": types.UpdateStoryDocument,
    "\n  mutation DeleteStory($input: DeleteStoryInput!) {\n    deleteStory(input: $input) {\n      storyId\n    }\n  }\n": types.DeleteStoryDocument,
    "\n  mutation PublishStory($storyId: ID!, $alias: String, $status: PublishmentStatus!) {\n    publishStory(input: { storyId: $storyId, alias: $alias, status: $status }) {\n      story {\n        id\n        alias\n        publishmentStatus\n      }\n    }\n  }\n": types.PublishStoryDocument,
    "\n  mutation CreateStoryPage($input: CreateStoryPageInput!) {\n    createStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n": types.CreateStoryPageDocument,
    "\n  mutation UpdateStoryPage($input: UpdateStoryPageInput!) {\n    updateStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n": types.UpdateStoryPageDocument,
    "\n  mutation DeleteStoryPage($input: DeleteStoryPageInput!) {\n    removeStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n": types.DeleteStoryPageDocument,
    "\n  mutation MoveStoryPage($input: MoveStoryPageInput!) {\n    moveStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n": types.MoveStoryPageDocument,
    "\n  mutation CreateStoryBlock($input: CreateStoryBlockInput!){\n    createStoryBlock(input: $input) {\n      index\n      block {\n        id\n      }\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n": types.CreateStoryBlockDocument,
    "\n  mutation MoveStoryBlock($input: MoveStoryBlockInput!){\n    moveStoryBlock(input: $input) {\n      index\n      blockId\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n": types.MoveStoryBlockDocument,
    "\n  mutation RemoveStoryBlock($input: RemoveStoryBlockInput!){\n    removeStoryBlock(input: $input) {\n      blockId\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n": types.RemoveStoryBlockDocument,
    "\n  query GetUserBySearch($nameOrEmail: String!) {\n    searchUser(nameOrEmail: $nameOrEmail) {\n      id\n      name\n      email\n    }\n  }\n": types.GetUserBySearchDocument,
    "\n  query GetMe {\n    me {\n      id\n      name\n      email\n      lang\n      theme\n      myTeam {\n        id\n        name\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n      teams {\n        id\n        name\n        members {\n          user {\n            id\n            name\n            email\n          }\n          userId\n          role\n        }\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n      auths\n    }\n  }\n": types.GetMeDocument,
    "\n  mutation UpdateMe(\n    $name: String\n    $email: String\n    $lang: Lang\n    $theme: Theme\n    $password: String\n    $passwordConfirmation: String\n  ) {\n    updateMe(\n      input: {\n        name: $name\n        email: $email\n        lang: $lang\n        theme: $theme\n        password: $password\n        passwordConfirmation: $passwordConfirmation\n      }\n    ) {\n      me {\n        id\n        name\n        email\n        lang\n        theme\n        myTeam {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.UpdateMeDocument,
    "\n  mutation DeleteMe($userId: ID!) {\n    deleteMe(input: { userId: $userId }) {\n      userId\n    }\n  }\n": types.DeleteMeDocument,
    " mutation AddWidget($sceneId: ID!, $pluginId: ID!, $extensionId: ID!, $lang: Lang) {\n    addWidget(\n      input: {sceneId: $sceneId, pluginId: $pluginId, extensionId: $extensionId}\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n      }\n      sceneWidget {\n        id\n        enabled\n        pluginId\n        extensionId\n      }\n    }\n  }": types.AddWidgetDocument,
    "\n  mutation UpdateWidget(\n    $sceneId: ID!\n    $widgetId: ID!\n    $enabled: Boolean\n    $location: WidgetLocationInput\n    $extended: Boolean\n    $index: Int\n  ) {\n    updateWidget(\n      input: {\n        sceneId: $sceneId\n        widgetId: $widgetId\n        enabled: $enabled\n        location: $location\n        extended: $extended\n        index: $index\n      }\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          extended\n          pluginId\n          extensionId\n          propertyId\n        }\n      }\n    }\n  }\n": types.UpdateWidgetDocument,
    "\n  mutation RemoveWidget($sceneId: ID!, $widgetId: ID!) {\n    removeWidget(input: { sceneId: $sceneId, widgetId: $widgetId }) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n        }\n      }\n    }\n  }\n": types.RemoveWidgetDocument,
    "\n  mutation UpdateWidgetAlignSystem(\n    $sceneId: ID!\n    $location: WidgetLocationInput!\n    $align: WidgetAreaAlign\n    $padding: WidgetAreaPaddingInput\n    $gap: Int\n    $centered: Boolean\n    $background: String\n  ) {\n    updateWidgetAlignSystem(\n      input: {\n        sceneId: $sceneId\n        location: $location\n        align: $align\n        padding: $padding\n        gap: $gap\n        centered: $centered\n        background: $background\n      }\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n        }\n        widgetAlignSystem {\n          ...WidgetAlignSystemFragment\n        }\n      }\n    }\n  }\n": types.UpdateWidgetAlignSystemDocument,
    "\n  mutation CreateWorkspace($name: String!) {\n    createTeam(input: { name: $name }) {\n      team {\n        id\n        name\n        members {\n          user {\n            id\n            name\n            email\n          }\n          userId\n          role\n        }\n        personal\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n    }\n  }\n": types.CreateWorkspaceDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment WidgetAlignSystemFragment on WidgetAlignSystem {\n    outer {\n      ...WidgetZoneFragment\n    }\n    inner {\n      ...WidgetZoneFragment\n    }\n  }\n\n  fragment WidgetZoneFragment on WidgetZone {\n    left {\n      ...WidgetSectionFragment\n    }\n    center {\n      ...WidgetSectionFragment\n    }\n    right {\n      ...WidgetSectionFragment\n    }\n  }\n\n  fragment WidgetSectionFragment on WidgetSection {\n    top {\n      ...WidgetAreaFragment\n    }\n    middle {\n      ...WidgetAreaFragment\n    }\n    bottom {\n      ...WidgetAreaFragment\n    }\n  }\n\n  fragment WidgetAreaFragment on WidgetArea {\n    widgetIds\n    align\n    padding {\n      top\n      bottom\n      left\n      right\n    }\n    gap\n    centered\n    background\n  }\n"): (typeof documents)["\n  fragment WidgetAlignSystemFragment on WidgetAlignSystem {\n    outer {\n      ...WidgetZoneFragment\n    }\n    inner {\n      ...WidgetZoneFragment\n    }\n  }\n\n  fragment WidgetZoneFragment on WidgetZone {\n    left {\n      ...WidgetSectionFragment\n    }\n    center {\n      ...WidgetSectionFragment\n    }\n    right {\n      ...WidgetSectionFragment\n    }\n  }\n\n  fragment WidgetSectionFragment on WidgetSection {\n    top {\n      ...WidgetAreaFragment\n    }\n    middle {\n      ...WidgetAreaFragment\n    }\n    bottom {\n      ...WidgetAreaFragment\n    }\n  }\n\n  fragment WidgetAreaFragment on WidgetArea {\n    widgetIds\n    align\n    padding {\n      top\n      bottom\n      left\n      right\n    }\n    gap\n    centered\n    background\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment DatasetFragment on Dataset {\n    id\n    source\n    schemaId\n    fields {\n      fieldId\n      type\n      value\n      field {\n        id\n        name\n      }\n    }\n    name\n  }\n"): (typeof documents)["\n  fragment DatasetFragment on Dataset {\n    id\n    source\n    schemaId\n    fields {\n      fieldId\n      type\n      value\n      field {\n        id\n        name\n      }\n    }\n    name\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment FeatureFragment on Feature {\n    id\n    type\n    properties\n    geometry {\n      ... on Point {\n        type\n        pointCoordinates\n      }\n      ... on LineString {\n        type\n        lineStringCoordinates\n      }\n      ... on Polygon {\n        type\n        polygonCoordinates\n      }\n      ... on MultiPolygon {\n        type\n        multiPolygonCoordinates\n      }\n      ... on GeometryCollection {\n        type\n        geometries {\n          ... on Point {\n            type\n            pointCoordinates\n          }\n          ... on LineString {\n            type\n            lineStringCoordinates\n          }\n          ... on Polygon {\n            type\n            polygonCoordinates\n          }\n          ... on MultiPolygon {\n            type\n            multiPolygonCoordinates\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment FeatureFragment on Feature {\n    id\n    type\n    properties\n    geometry {\n      ... on Point {\n        type\n        pointCoordinates\n      }\n      ... on LineString {\n        type\n        lineStringCoordinates\n      }\n      ... on Polygon {\n        type\n        polygonCoordinates\n      }\n      ... on MultiPolygon {\n        type\n        multiPolygonCoordinates\n      }\n      ... on GeometryCollection {\n        type\n        geometries {\n          ... on Point {\n            type\n            pointCoordinates\n          }\n          ... on LineString {\n            type\n            lineStringCoordinates\n          }\n          ... on Polygon {\n            type\n            polygonCoordinates\n          }\n          ... on MultiPolygon {\n            type\n            multiPolygonCoordinates\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment InfoboxFragment on Infobox {\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    fields {\n      id\n      pluginId\n      extensionId\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n\n  fragment MergedInfoboxFragment on MergedInfobox {\n    property {\n      ...MergedPropertyFragment\n    }\n    fields {\n      originalId\n      pluginId\n      extensionId\n      property {\n        ...MergedPropertyFragment\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  fragment InfoboxFragment on Infobox {\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    fields {\n      id\n      pluginId\n      extensionId\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n\n  fragment MergedInfoboxFragment on MergedInfobox {\n    property {\n      ...MergedPropertyFragment\n    }\n    fields {\n      originalId\n      pluginId\n      extensionId\n      property {\n        ...MergedPropertyFragment\n      }\n    }\n  }\n\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LayerSystemLayer on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n      layers {\n        id\n      }\n    }\n    ... on LayerItem {\n      linkedDatasetId\n    }\n  }\n\n  fragment LayerSystemLayer1 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer\n      }\n    }\n  }\n\n  fragment LayerSystemLayer2 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer1\n      }\n    }\n  }\n\n  fragment LayerSystemLayer3 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer2\n      }\n    }\n  }\n\n  fragment LayerSystemLayer4 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer3\n      }\n    }\n  }\n\n  fragment LayerSystemLayer5 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer4\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment LayerSystemLayer on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n      layers {\n        id\n      }\n    }\n    ... on LayerItem {\n      linkedDatasetId\n    }\n  }\n\n  fragment LayerSystemLayer1 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer\n      }\n    }\n  }\n\n  fragment LayerSystemLayer2 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer1\n      }\n    }\n  }\n\n  fragment LayerSystemLayer3 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer2\n      }\n    }\n  }\n\n  fragment LayerSystemLayer4 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer3\n      }\n    }\n  }\n\n  fragment LayerSystemLayer5 on Layer {\n    id\n    ...LayerSystemLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerSystemLayer4\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment EarthLayerCommon on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    scenePlugin {\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    tags {\n      tagId\n      tag {\n        id\n        label\n      }\n      ... on LayerTagGroup {\n        children {\n          tagId\n          tag {\n            id\n            label\n          }\n        }\n      }\n    }\n    infobox {\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n      fields {\n        id\n        pluginId\n        extensionId\n        propertyId\n        scenePlugin {\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n      layers {\n        id\n      }\n    }\n  }\n\n  fragment EarthLayerItem on LayerItem {\n    id\n    linkedDatasetId\n    scenePlugin {\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n\n  fragment EarthLayer on Layer {\n    id\n    ...EarthLayerCommon\n    ...EarthLayerItem\n  }\n\n  fragment EarthLayer1 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer\n      }\n    }\n  }\n\n  fragment EarthLayer2 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer1\n      }\n    }\n  }\n\n  fragment EarthLayer3 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer2\n      }\n    }\n  }\n\n  fragment EarthLayer4 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer3\n      }\n    }\n  }\n\n  fragment EarthLayer5 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer4\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  fragment EarthLayerCommon on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    scenePlugin {\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    tags {\n      tagId\n      tag {\n        id\n        label\n      }\n      ... on LayerTagGroup {\n        children {\n          tagId\n          tag {\n            id\n            label\n          }\n        }\n      }\n    }\n    infobox {\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n      fields {\n        id\n        pluginId\n        extensionId\n        propertyId\n        scenePlugin {\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n      layers {\n        id\n      }\n    }\n  }\n\n  fragment EarthLayerItem on LayerItem {\n    id\n    linkedDatasetId\n    scenePlugin {\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n\n  fragment EarthLayer on Layer {\n    id\n    ...EarthLayerCommon\n    ...EarthLayerItem\n  }\n\n  fragment EarthLayer1 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer\n      }\n    }\n  }\n\n  fragment EarthLayer2 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer1\n      }\n    }\n  }\n\n  fragment EarthLayer3 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer2\n      }\n    }\n  }\n\n  fragment EarthLayer4 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer3\n      }\n    }\n  }\n\n  fragment EarthLayer5 on Layer {\n    id\n    ...EarthLayer\n    ... on LayerGroup {\n      layers {\n        id\n        ...EarthLayer4\n      }\n    }\n  }\n\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LayerFragment on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    property {\n      id\n      ...PropertyFragment\n    }\n    infobox {\n      ...InfoboxFragment\n    }\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n    }\n    ... on LayerItem {\n      linkedDatasetId\n      merged {\n        parentId\n        property {\n          ...MergedPropertyFragment\n        }\n        infobox {\n          ...MergedInfoboxFragment\n        }\n      }\n    }\n  }\n\n  fragment Layer0Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n      }\n    }\n  }\n\n  fragment Layer1Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n      }\n    }\n  }\n\n  fragment Layer2Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer3Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer4Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n                ... on LayerGroup {\n                  layers {\n                    id\n                    ...LayerFragment\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer5Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n                ... on LayerGroup {\n                  layers {\n                    id\n                    ...LayerFragment\n                    ... on LayerGroup {\n                      layers {\n                        id\n                        ...LayerFragment\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  fragment LayerFragment on Layer {\n    id\n    name\n    isVisible\n    pluginId\n    extensionId\n    property {\n      id\n      ...PropertyFragment\n    }\n    infobox {\n      ...InfoboxFragment\n    }\n    ... on LayerGroup {\n      linkedDatasetSchemaId\n    }\n    ... on LayerItem {\n      linkedDatasetId\n      merged {\n        parentId\n        property {\n          ...MergedPropertyFragment\n        }\n        infobox {\n          ...MergedInfoboxFragment\n        }\n      }\n    }\n  }\n\n  fragment Layer0Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n      }\n    }\n  }\n\n  fragment Layer1Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n      }\n    }\n  }\n\n  fragment Layer2Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer3Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer4Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n                ... on LayerGroup {\n                  layers {\n                    id\n                    ...LayerFragment\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment Layer5Fragment on Layer {\n    id\n    ...LayerFragment\n    ... on LayerGroup {\n      layers {\n        id\n        ...LayerFragment\n        ... on LayerGroup {\n          layers {\n            id\n            ...LayerFragment\n            ... on LayerGroup {\n              layers {\n                id\n                ...LayerFragment\n                ... on LayerGroup {\n                  layers {\n                    id\n                    ...LayerFragment\n                    ... on LayerGroup {\n                      layers {\n                        id\n                        ...LayerFragment\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NLSLayerCommon on NLSLayer {\n    id\n    layerType\n    sceneId\n    config\n    title\n    visible\n    infobox {\n      sceneId\n      layerId\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n      blocks {\n        id\n        pluginId\n        extensionId\n        propertyId\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n    isSketch\n    sketch {\n      customPropertySchema\n      featureCollection {\n        type\n        features {\n          ...FeatureFragment\n        }\n      }\n    }\n    ... on NLSLayerGroup {\n      children {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment NLSLayerCommon on NLSLayer {\n    id\n    layerType\n    sceneId\n    config\n    title\n    visible\n    infobox {\n      sceneId\n      layerId\n      propertyId\n      property {\n        id\n        ...PropertyFragment\n      }\n      blocks {\n        id\n        pluginId\n        extensionId\n        propertyId\n        property {\n          id\n          ...PropertyFragment\n        }\n      }\n    }\n    isSketch\n    sketch {\n      customPropertySchema\n      featureCollection {\n        type\n        features {\n          ...FeatureFragment\n        }\n      }\n    }\n    ... on NLSLayerGroup {\n      children {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment NLSLayerStyle on Style {\n    id\n    name\n    value\n  }\n"): (typeof documents)["\n  fragment NLSLayerStyle on Style {\n    id\n    name\n    value\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PluginFragment on Plugin {\n    id\n    name\n    extensions {\n      extensionId\n      description\n      name\n      translatedDescription(lang: $lang)\n      translatedName(lang: $lang)\n      icon\n      singleOnly\n      type\n      widgetLayout {\n        extendable {\n          vertically\n          horizontally\n        }\n        extended\n        floating\n        defaultLocation {\n          zone\n          section\n          area\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PluginFragment on Plugin {\n    id\n    name\n    extensions {\n      extensionId\n      description\n      name\n      translatedDescription(lang: $lang)\n      translatedName(lang: $lang)\n      icon\n      singleOnly\n      type\n      widgetLayout {\n        extendable {\n          vertically\n          horizontally\n        }\n        extended\n        floating\n        defaultLocation {\n          zone\n          section\n          area\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment ProjectFragment on Project {\n    id\n    name\n    description\n    imageUrl\n    isArchived\n    isBasicAuthActive\n    basicAuthUsername\n    basicAuthPassword\n    publicTitle\n    publicDescription\n    publicImage\n    alias\n    enableGa\n    trackingId\n    publishmentStatus\n    updatedAt\n    createdAt\n    coreSupport\n  }\n"): (typeof documents)["\n  fragment ProjectFragment on Project {\n    id\n    name\n    description\n    imageUrl\n    isArchived\n    isBasicAuthActive\n    basicAuthUsername\n    basicAuthPassword\n    publicTitle\n    publicDescription\n    publicImage\n    alias\n    enableGa\n    trackingId\n    publishmentStatus\n    updatedAt\n    createdAt\n    coreSupport\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PropertySchemaFieldFragment on PropertySchemaField {\n    fieldId\n    title\n    description\n    translatedTitle(lang: $lang)\n    translatedDescription(lang: $lang)\n    prefix\n    suffix\n    type\n    defaultValue\n    ui\n    min\n    max\n    choices {\n      key\n      icon\n      title\n      translatedTitle(lang: $lang)\n    }\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n  }\n\n  fragment PropertySchemaGroupFragment on PropertySchemaGroup {\n    schemaGroupId\n    title\n    collection\n    translatedTitle(lang: $lang)\n    isList\n    representativeFieldId\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n    fields {\n      ...PropertySchemaFieldFragment\n    }\n  }\n\n  fragment PropertyFieldFragment on PropertyField {\n    id\n    fieldId\n    type\n    value\n    links {\n      ...PropertyFieldLink\n    }\n  }\n\n  fragment PropertyGroupFragment on PropertyGroup {\n    id\n    schemaGroupId\n    fields {\n      ...PropertyFieldFragment\n    }\n  }\n\n  fragment PropertyItemFragment on PropertyItem {\n    ... on PropertyGroupList {\n      id\n      schemaGroupId\n      groups {\n        ...PropertyGroupFragment\n      }\n    }\n    ... on PropertyGroup {\n      ...PropertyGroupFragment\n    }\n  }\n\n  fragment PropertyFragmentWithoutSchema on Property {\n    id\n    items {\n      ...PropertyItemFragment\n    }\n  }\n\n  fragment PropertyFragment on Property {\n    id\n    ...PropertyFragmentWithoutSchema\n    schema {\n      id\n      groups {\n        ...PropertySchemaGroupFragment\n      }\n    }\n  }\n\n  fragment MergedPropertyGroupCommonFragment on MergedPropertyGroup {\n    schemaGroupId\n    fields {\n      fieldId\n      type\n      actualValue\n      overridden\n      links {\n        ...PropertyFieldLink\n      }\n    }\n  }\n\n  fragment MergedPropertyGroupFragment on MergedPropertyGroup {\n    ...MergedPropertyGroupCommonFragment\n    groups {\n      ...MergedPropertyGroupCommonFragment\n    }\n  }\n\n  fragment MergedPropertyFragmentWithoutSchema on MergedProperty {\n    originalId\n    parentId\n    linkedDatasetId\n    groups {\n      ...MergedPropertyGroupFragment\n    }\n  }\n\n  fragment MergedPropertyFragment on MergedProperty {\n    ...MergedPropertyFragmentWithoutSchema\n    schema {\n      id\n    }\n  }\n\n  fragment PropertyFieldLink on PropertyFieldLink {\n    datasetId\n    datasetSchemaId\n    datasetSchemaFieldId\n  }\n"): (typeof documents)["\n  fragment PropertySchemaFieldFragment on PropertySchemaField {\n    fieldId\n    title\n    description\n    translatedTitle(lang: $lang)\n    translatedDescription(lang: $lang)\n    prefix\n    suffix\n    type\n    defaultValue\n    ui\n    min\n    max\n    choices {\n      key\n      icon\n      title\n      translatedTitle(lang: $lang)\n    }\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n  }\n\n  fragment PropertySchemaGroupFragment on PropertySchemaGroup {\n    schemaGroupId\n    title\n    collection\n    translatedTitle(lang: $lang)\n    isList\n    representativeFieldId\n    isAvailableIf {\n      fieldId\n      type\n      value\n    }\n    fields {\n      ...PropertySchemaFieldFragment\n    }\n  }\n\n  fragment PropertyFieldFragment on PropertyField {\n    id\n    fieldId\n    type\n    value\n    links {\n      ...PropertyFieldLink\n    }\n  }\n\n  fragment PropertyGroupFragment on PropertyGroup {\n    id\n    schemaGroupId\n    fields {\n      ...PropertyFieldFragment\n    }\n  }\n\n  fragment PropertyItemFragment on PropertyItem {\n    ... on PropertyGroupList {\n      id\n      schemaGroupId\n      groups {\n        ...PropertyGroupFragment\n      }\n    }\n    ... on PropertyGroup {\n      ...PropertyGroupFragment\n    }\n  }\n\n  fragment PropertyFragmentWithoutSchema on Property {\n    id\n    items {\n      ...PropertyItemFragment\n    }\n  }\n\n  fragment PropertyFragment on Property {\n    id\n    ...PropertyFragmentWithoutSchema\n    schema {\n      id\n      groups {\n        ...PropertySchemaGroupFragment\n      }\n    }\n  }\n\n  fragment MergedPropertyGroupCommonFragment on MergedPropertyGroup {\n    schemaGroupId\n    fields {\n      fieldId\n      type\n      actualValue\n      overridden\n      links {\n        ...PropertyFieldLink\n      }\n    }\n  }\n\n  fragment MergedPropertyGroupFragment on MergedPropertyGroup {\n    ...MergedPropertyGroupCommonFragment\n    groups {\n      ...MergedPropertyGroupCommonFragment\n    }\n  }\n\n  fragment MergedPropertyFragmentWithoutSchema on MergedProperty {\n    originalId\n    parentId\n    linkedDatasetId\n    groups {\n      ...MergedPropertyGroupFragment\n    }\n  }\n\n  fragment MergedPropertyFragment on MergedProperty {\n    ...MergedPropertyFragmentWithoutSchema\n    schema {\n      id\n    }\n  }\n\n  fragment PropertyFieldLink on PropertyFieldLink {\n    datasetId\n    datasetSchemaId\n    datasetSchemaFieldId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StoryFragment on Story {\n    id\n    title\n    panelPosition\n    bgColor\n    isBasicAuthActive\n    basicAuthUsername\n    basicAuthPassword\n    alias\n    publicTitle\n    publicDescription\n    publishmentStatus\n    publicImage\n    publicNoIndex\n    pages {\n      ...StoryPageFragment\n    }\n  }\n"): (typeof documents)["\n  fragment StoryFragment on Story {\n    id\n    title\n    panelPosition\n    bgColor\n    isBasicAuthActive\n    basicAuthUsername\n    basicAuthPassword\n    alias\n    publicTitle\n    publicDescription\n    publishmentStatus\n    publicImage\n    publicNoIndex\n    pages {\n      ...StoryPageFragment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StoryPageFragment on StoryPage {\n    id\n    title\n    swipeable\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    layersIds\n    blocks {\n      id\n      pluginId\n      extensionId\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment StoryPageFragment on StoryPage {\n    id\n    title\n    swipeable\n    propertyId\n    property {\n      id\n      ...PropertyFragment\n    }\n    layersIds\n    blocks {\n      id\n      pluginId\n      extensionId\n      property {\n        id\n        ...PropertyFragment\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetAssets($teamId: ID!, $sort: AssetSortType, $keyword: String, $pagination: Pagination) {\n    assets(teamId: $teamId, keyword: $keyword, sort: $sort, pagination: $pagination) {\n      edges {\n        cursor\n        node {\n          id\n          teamId\n          name\n          size\n          url\n          contentType\n        }\n      }\n      nodes {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetAssets($teamId: ID!, $sort: AssetSortType, $keyword: String, $pagination: Pagination) {\n    assets(teamId: $teamId, keyword: $keyword, sort: $sort, pagination: $pagination) {\n      edges {\n        cursor\n        node {\n          id\n          teamId\n          name\n          size\n          url\n          contentType\n        }\n      }\n      nodes {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateAsset($teamId: ID!, $file: Upload!) {\n    createAsset(input: { teamId: $teamId, file: $file }) {\n      asset {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateAsset($teamId: ID!, $file: Upload!) {\n    createAsset(input: { teamId: $teamId, file: $file }) {\n      asset {\n        id\n        teamId\n        name\n        size\n        url\n        contentType\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveAsset($assetId: ID!) {\n    removeAsset(input: { assetId: $assetId }) {\n      assetId\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveAsset($assetId: ID!) {\n    removeAsset(input: { assetId: $assetId }) {\n      assetId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddGeoJSONFeature($input: AddGeoJSONFeatureInput!) {\n    addGeoJSONFeature(input: $input) {\n      id\n\t\t  type\n\t\t  properties\n    }\n  }\n"): (typeof documents)["\n  mutation AddGeoJSONFeature($input: AddGeoJSONFeatureInput!) {\n    addGeoJSONFeature(input: $input) {\n      id\n\t\t  type\n\t\t  properties\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateGeoJSONFeature($input: UpdateGeoJSONFeatureInput!) {\n    updateGeoJSONFeature(input: $input) {\n      id\n\t\t  type\n\t\t  properties\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateGeoJSONFeature($input: UpdateGeoJSONFeatureInput!) {\n    updateGeoJSONFeature(input: $input) {\n      id\n\t\t  type\n\t\t  properties\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateNLSInfobox($input: CreateNLSInfoboxInput!) {\n    createNLSInfobox(input: $input) {\n      layer{\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateNLSInfobox($input: CreateNLSInfoboxInput!) {\n    createNLSInfobox(input: $input) {\n      layer{\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveNLSInfobox($input: RemoveNLSInfoboxInput!) {\n    removeNLSInfobox(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveNLSInfobox($input: RemoveNLSInfoboxInput!) {\n    removeNLSInfobox(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddNLSInfoboxBlock($input: AddNLSInfoboxBlockInput!) {\n    addNLSInfoboxBlock(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddNLSInfoboxBlock($input: AddNLSInfoboxBlockInput!) {\n    addNLSInfoboxBlock(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MoveNLSInfoboxBlock($input: MoveNLSInfoboxBlockInput!) {\n    moveNLSInfoboxBlock(input: $input) {\n      index\n      infoboxBlockId\n      layer {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveNLSInfoboxBlock($input: MoveNLSInfoboxBlockInput!) {\n    moveNLSInfoboxBlock(input: $input) {\n      index\n      infoboxBlockId\n      layer {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveNLSInfoboxBlock($input: RemoveNLSInfoboxBlockInput!) {\n    removeNLSInfoboxBlock(input: $input) {\n      infoboxBlockId\n      layer {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveNLSInfoboxBlock($input: RemoveNLSInfoboxBlockInput!) {\n    removeNLSInfoboxBlock(input: $input) {\n      infoboxBlockId\n      layer {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddNLSLayerSimple($input: AddNLSLayerSimpleInput!) {\n    addNLSLayerSimple(input: $input) {\n      layers {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddNLSLayerSimple($input: AddNLSLayerSimpleInput!) {\n    addNLSLayerSimple(input: $input) {\n      layers {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateNLSLayer($input: UpdateNLSLayerInput!) {\n    updateNLSLayer(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateNLSLayer($input: UpdateNLSLayerInput!) {\n    updateNLSLayer(input: $input) {\n      layer {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveNLSLayer($input: RemoveNLSLayerInput!) {\n    removeNLSLayer(input: $input) {\n      layerId\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveNLSLayer($input: RemoveNLSLayerInput!) {\n    removeNLSLayer(input: $input) {\n      layerId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddStyle($input: AddStyleInput!) {\n    addStyle(input: $input) {\n      style {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddStyle($input: AddStyleInput!) {\n    addStyle(input: $input) {\n      style {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateStyle($input: UpdateStyleInput!) {\n    updateStyle(input: $input) {\n      style {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStyle($input: UpdateStyleInput!) {\n    updateStyle(input: $input) {\n      style {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveStyle($input: RemoveStyleInput!) {\n    removeStyle(input: $input) {\n      styleId\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveStyle($input: RemoveStyleInput!) {\n    removeStyle(input: $input) {\n      styleId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation InstallPlugin($sceneId: ID!, $pluginId: ID!) {\n    installPlugin(input: { sceneId: $sceneId, pluginId: $pluginId }) {\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InstallPlugin($sceneId: ID!, $pluginId: ID!) {\n    installPlugin(input: { sceneId: $sceneId, pluginId: $pluginId }) {\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpgradePlugin($sceneId: ID!, $pluginId: ID!, $toPluginId: ID!) {\n    upgradePlugin(input: { sceneId: $sceneId, pluginId: $pluginId, toPluginId: $toPluginId }) {\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpgradePlugin($sceneId: ID!, $pluginId: ID!, $toPluginId: ID!) {\n    upgradePlugin(input: { sceneId: $sceneId, pluginId: $pluginId, toPluginId: $toPluginId }) {\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UploadPlugin($sceneId: ID!, $file: Upload, $url: URL) {\n    uploadPlugin(input: { sceneId: $sceneId, file: $file, url: $url }) {\n      plugin {\n        id\n        name\n        version\n        description\n        author\n      }\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UploadPlugin($sceneId: ID!, $file: Upload, $url: URL) {\n    uploadPlugin(input: { sceneId: $sceneId, file: $file, url: $url }) {\n      plugin {\n        id\n        name\n        version\n        description\n        author\n      }\n      scenePlugin {\n        pluginId\n        propertyId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UninstallPlugin($sceneId: ID!, $pluginId: ID!) {\n    uninstallPlugin(input: { sceneId: $sceneId, pluginId: $pluginId }) {\n      pluginId\n    }\n  }\n"): (typeof documents)["\n  mutation UninstallPlugin($sceneId: ID!, $pluginId: ID!) {\n    uninstallPlugin(input: { sceneId: $sceneId, pluginId: $pluginId }) {\n      pluginId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProject($projectId: ID!) {\n    node(id: $projectId, type: PROJECT) {\n      id\n      ... on Project {\n        ...ProjectFragment\n        scene {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetProject($projectId: ID!) {\n    node(id: $projectId, type: PROJECT) {\n      id\n      ... on Project {\n        ...ProjectFragment\n        scene {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProjects($teamId: ID!, $first: Int, $last: Int, $after: Cursor, $before: Cursor) {\n    projects(teamId: $teamId, first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          id\n          ...ProjectFragment\n          scene {\n            id\n          }\n        }\n      }\n      nodes {\n        id\n        ...ProjectFragment\n        scene {\n          id\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n\n\n"): (typeof documents)["\n  query GetProjects($teamId: ID!, $first: Int, $last: Int, $after: Cursor, $before: Cursor) {\n    projects(teamId: $teamId, first: $first, last: $last, after: $after, before: $before) {\n      edges {\n        node {\n          id\n          ...ProjectFragment\n          scene {\n            id\n          }\n        }\n      }\n      nodes {\n        id\n        ...ProjectFragment\n        scene {\n          id\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n      totalCount\n    }\n  }\n\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CheckProjectAlias($alias: String!) {\n    checkProjectAlias(alias: $alias) {\n      alias\n      available\n    }\n  }\n"): (typeof documents)["\n  query CheckProjectAlias($alias: String!) {\n    checkProjectAlias(alias: $alias) {\n      alias\n      available\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProject(\n    $teamId: ID!\n    $visualizer: Visualizer!\n    $name: String!\n    $description: String!\n    $imageUrl: URL\n    $coreSupport: Boolean\n  ) {\n    createProject(\n      input: {\n        teamId: $teamId\n        visualizer: $visualizer\n        name: $name\n        description: $description\n        imageUrl: $imageUrl\n        coreSupport: $coreSupport\n      }\n    ) {\n      project {\n        id\n        name\n        description\n        imageUrl\n        coreSupport\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProject(\n    $teamId: ID!\n    $visualizer: Visualizer!\n    $name: String!\n    $description: String!\n    $imageUrl: URL\n    $coreSupport: Boolean\n  ) {\n    createProject(\n      input: {\n        teamId: $teamId\n        visualizer: $visualizer\n        name: $name\n        description: $description\n        imageUrl: $imageUrl\n        coreSupport: $coreSupport\n      }\n    ) {\n      project {\n        id\n        name\n        description\n        imageUrl\n        coreSupport\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateProject(\n    $projectId: ID!\n    $name: String\n    $description: String\n    $imageUrl: URL\n    $publicTitle: String\n    $publicDescription: String\n    $publicImage: String\n    $deleteImageUrl: Boolean\n    $deletePublicImage: Boolean\n    $enableGa: Boolean\n    $trackingId: String\n  ) {\n    updateProject(\n      input: {\n        projectId: $projectId\n        name: $name\n        description: $description\n        imageUrl: $imageUrl\n        publicTitle: $publicTitle\n        publicDescription: $publicDescription\n        publicImage: $publicImage\n        deleteImageUrl: $deleteImageUrl\n        deletePublicImage: $deletePublicImage\n        enableGa: $enableGa\n        trackingId: $trackingId\n      }\n    ) {\n      project {\n        id\n        ...ProjectFragment\n      }\n    }\n  }\n\n"): (typeof documents)["\n  mutation UpdateProject(\n    $projectId: ID!\n    $name: String\n    $description: String\n    $imageUrl: URL\n    $publicTitle: String\n    $publicDescription: String\n    $publicImage: String\n    $deleteImageUrl: Boolean\n    $deletePublicImage: Boolean\n    $enableGa: Boolean\n    $trackingId: String\n  ) {\n    updateProject(\n      input: {\n        projectId: $projectId\n        name: $name\n        description: $description\n        imageUrl: $imageUrl\n        publicTitle: $publicTitle\n        publicDescription: $publicDescription\n        publicImage: $publicImage\n        deleteImageUrl: $deleteImageUrl\n        deletePublicImage: $deletePublicImage\n        enableGa: $enableGa\n        trackingId: $trackingId\n      }\n    ) {\n      project {\n        id\n        ...ProjectFragment\n      }\n    }\n  }\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateProjectBasicAuth(\n    $projectId: ID!\n    $isBasicAuthActive: Boolean\n    $basicAuthUsername: String\n    $basicAuthPassword: String\n  ) {\n    updateProject(\n      input: {\n        projectId: $projectId\n        isBasicAuthActive: $isBasicAuthActive\n        basicAuthUsername: $basicAuthUsername\n        basicAuthPassword: $basicAuthPassword\n      }\n    ) {\n      project {\n        id\n        name\n        isBasicAuthActive\n        basicAuthUsername\n        basicAuthPassword\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProjectBasicAuth(\n    $projectId: ID!\n    $isBasicAuthActive: Boolean\n    $basicAuthUsername: String\n    $basicAuthPassword: String\n  ) {\n    updateProject(\n      input: {\n        projectId: $projectId\n        isBasicAuthActive: $isBasicAuthActive\n        basicAuthUsername: $basicAuthUsername\n        basicAuthPassword: $basicAuthPassword\n      }\n    ) {\n      project {\n        id\n        name\n        isBasicAuthActive\n        basicAuthUsername\n        basicAuthPassword\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateProjectAlias($projectId: ID!, $alias: String!) {\n    updateProject(input: { projectId: $projectId, alias: $alias }) {\n      project {\n        id\n        name\n        alias\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateProjectAlias($projectId: ID!, $alias: String!) {\n    updateProject(input: { projectId: $projectId, alias: $alias }) {\n      project {\n        id\n        name\n        alias\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PublishProject($projectId: ID!, $alias: String, $status: PublishmentStatus!) {\n    publishProject(input: { projectId: $projectId, alias: $alias, status: $status }) {\n      project {\n        id\n        alias\n        publishmentStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PublishProject($projectId: ID!, $alias: String, $status: PublishmentStatus!) {\n    publishProject(input: { projectId: $projectId, alias: $alias, status: $status }) {\n      project {\n        id\n        alias\n        publishmentStatus\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ArchiveProject($projectId: ID!, $archived: Boolean!) {\n    updateProject(input: { projectId: $projectId, archived: $archived }) {\n      project {\n        id\n        isArchived\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArchiveProject($projectId: ID!, $archived: Boolean!) {\n    updateProject(input: { projectId: $projectId, archived: $archived }) {\n      project {\n        id\n        isArchived\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteProject($projectId: ID!) {\n    deleteProject(input: { projectId: $projectId }) {\n      projectId\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteProject($projectId: ID!) {\n    deleteProject(input: { projectId: $projectId }) {\n      projectId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePropertyValue(\n    $propertyId: ID!\n    $schemaGroupId: ID\n    $itemId: ID\n    $fieldId: ID!\n    $value: Any\n    $type: ValueType!\n    $lang: Lang\n  ) {\n    updatePropertyValue(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n        itemId: $itemId\n        fieldId: $fieldId\n        value: $value\n        type: $type\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePropertyValue(\n    $propertyId: ID!\n    $schemaGroupId: ID\n    $itemId: ID\n    $fieldId: ID!\n    $value: Any\n    $type: ValueType!\n    $lang: Lang\n  ) {\n    updatePropertyValue(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n        itemId: $itemId\n        fieldId: $fieldId\n        value: $value\n        type: $type\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddPropertyItem(\n    $propertyId: ID!\n    $schemaGroupId: ID!\n    $lang: Lang\n  ) {\n    addPropertyItem(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddPropertyItem(\n    $propertyId: ID!\n    $schemaGroupId: ID!\n    $lang: Lang\n  ) {\n    addPropertyItem(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemovePropertyItem($propertyId: ID!, $schemaGroupId: ID!, $itemId: ID!, $lang: Lang) {\n    removePropertyItem(\n      input: { propertyId: $propertyId, schemaGroupId: $schemaGroupId, itemId: $itemId }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemovePropertyItem($propertyId: ID!, $schemaGroupId: ID!, $itemId: ID!, $lang: Lang) {\n    removePropertyItem(\n      input: { propertyId: $propertyId, schemaGroupId: $schemaGroupId, itemId: $itemId }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MovePropertyItem(\n    $propertyId: ID!\n    $schemaGroupId: ID!\n    $itemId: ID!\n    $index: Int!\n    $lang: Lang\n  ) {\n    movePropertyItem(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n        itemId: $itemId\n        index: $index\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MovePropertyItem(\n    $propertyId: ID!\n    $schemaGroupId: ID!\n    $itemId: ID!\n    $index: Int!\n    $lang: Lang\n  ) {\n    movePropertyItem(\n      input: {\n        propertyId: $propertyId\n        schemaGroupId: $schemaGroupId\n        itemId: $itemId\n        index: $index\n      }\n    ) {\n      property {\n        id\n        ...PropertyFragment\n        layer {\n          id\n          ...Layer1Fragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetScene($sceneId: ID!, $lang: Lang) {\n    node(id: $sceneId, type: SCENE) {\n      id\n      ... on Scene {\n        rootLayerId\n        teamId\n        projectId\n        property {\n          id\n          ...PropertyFragment\n        }\n        clusters {\n          id\n          name\n          propertyId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        tags {\n          id\n          label\n          ... on TagGroup {\n            tags {\n              id\n              label\n            }\n          }\n        }\n        plugins {\n          property {\n            id\n            ...PropertyFragment\n          }\n          plugin {\n            ...PluginFragment\n          }\n        }\n        widgets {\n          id\n          enabled\n          extended\n          pluginId\n          extensionId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        widgetAlignSystem {\n          ...WidgetAlignSystemFragment\n        }\n        stories {\n          ...StoryFragment\n        }\n        newLayers {\n          ...NLSLayerCommon\n        }\n        styles {\n          ...NLSLayerStyle\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetScene($sceneId: ID!, $lang: Lang) {\n    node(id: $sceneId, type: SCENE) {\n      id\n      ... on Scene {\n        rootLayerId\n        teamId\n        projectId\n        property {\n          id\n          ...PropertyFragment\n        }\n        clusters {\n          id\n          name\n          propertyId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        tags {\n          id\n          label\n          ... on TagGroup {\n            tags {\n              id\n              label\n            }\n          }\n        }\n        plugins {\n          property {\n            id\n            ...PropertyFragment\n          }\n          plugin {\n            ...PluginFragment\n          }\n        }\n        widgets {\n          id\n          enabled\n          extended\n          pluginId\n          extensionId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n        widgetAlignSystem {\n          ...WidgetAlignSystemFragment\n        }\n        stories {\n          ...StoryFragment\n        }\n        newLayers {\n          ...NLSLayerCommon\n        }\n        styles {\n          ...NLSLayerStyle\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateScene($projectId: ID!) {\n    createScene(input: { projectId: $projectId }) {\n      scene {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateScene($projectId: ID!) {\n    createScene(input: { projectId: $projectId }) {\n      scene {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateStory($input: CreateStoryInput!) {\n    createStory(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStory($input: CreateStoryInput!) {\n    createStory(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateStory($input: UpdateStoryInput!) {\n    updateStory(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStory($input: UpdateStoryInput!) {\n    updateStory(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteStory($input: DeleteStoryInput!) {\n    deleteStory(input: $input) {\n      storyId\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteStory($input: DeleteStoryInput!) {\n    deleteStory(input: $input) {\n      storyId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation PublishStory($storyId: ID!, $alias: String, $status: PublishmentStatus!) {\n    publishStory(input: { storyId: $storyId, alias: $alias, status: $status }) {\n      story {\n        id\n        alias\n        publishmentStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PublishStory($storyId: ID!, $alias: String, $status: PublishmentStatus!) {\n    publishStory(input: { storyId: $storyId, alias: $alias, status: $status }) {\n      story {\n        id\n        alias\n        publishmentStatus\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateStoryPage($input: CreateStoryPageInput!) {\n    createStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStoryPage($input: CreateStoryPageInput!) {\n    createStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateStoryPage($input: UpdateStoryPageInput!) {\n    updateStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStoryPage($input: UpdateStoryPageInput!) {\n    updateStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteStoryPage($input: DeleteStoryPageInput!) {\n    removeStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteStoryPage($input: DeleteStoryPageInput!) {\n    removeStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MoveStoryPage($input: MoveStoryPageInput!) {\n    moveStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveStoryPage($input: MoveStoryPageInput!) {\n    moveStoryPage(input: $input) {\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateStoryBlock($input: CreateStoryBlockInput!){\n    createStoryBlock(input: $input) {\n      index\n      block {\n        id\n      }\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStoryBlock($input: CreateStoryBlockInput!){\n    createStoryBlock(input: $input) {\n      index\n      block {\n        id\n      }\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation MoveStoryBlock($input: MoveStoryBlockInput!){\n    moveStoryBlock(input: $input) {\n      index\n      blockId\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MoveStoryBlock($input: MoveStoryBlockInput!){\n    moveStoryBlock(input: $input) {\n      index\n      blockId\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveStoryBlock($input: RemoveStoryBlockInput!){\n    removeStoryBlock(input: $input) {\n      blockId\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveStoryBlock($input: RemoveStoryBlockInput!){\n    removeStoryBlock(input: $input) {\n      blockId\n      page {\n        id\n      }\n      story {\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetUserBySearch($nameOrEmail: String!) {\n    searchUser(nameOrEmail: $nameOrEmail) {\n      id\n      name\n      email\n    }\n  }\n"): (typeof documents)["\n  query GetUserBySearch($nameOrEmail: String!) {\n    searchUser(nameOrEmail: $nameOrEmail) {\n      id\n      name\n      email\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMe {\n    me {\n      id\n      name\n      email\n      lang\n      theme\n      myTeam {\n        id\n        name\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n      teams {\n        id\n        name\n        members {\n          user {\n            id\n            name\n            email\n          }\n          userId\n          role\n        }\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n      auths\n    }\n  }\n"): (typeof documents)["\n  query GetMe {\n    me {\n      id\n      name\n      email\n      lang\n      theme\n      myTeam {\n        id\n        name\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n      teams {\n        id\n        name\n        members {\n          user {\n            id\n            name\n            email\n          }\n          userId\n          role\n        }\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n      auths\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateMe(\n    $name: String\n    $email: String\n    $lang: Lang\n    $theme: Theme\n    $password: String\n    $passwordConfirmation: String\n  ) {\n    updateMe(\n      input: {\n        name: $name\n        email: $email\n        lang: $lang\n        theme: $theme\n        password: $password\n        passwordConfirmation: $passwordConfirmation\n      }\n    ) {\n      me {\n        id\n        name\n        email\n        lang\n        theme\n        myTeam {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMe(\n    $name: String\n    $email: String\n    $lang: Lang\n    $theme: Theme\n    $password: String\n    $passwordConfirmation: String\n  ) {\n    updateMe(\n      input: {\n        name: $name\n        email: $email\n        lang: $lang\n        theme: $theme\n        password: $password\n        passwordConfirmation: $passwordConfirmation\n      }\n    ) {\n      me {\n        id\n        name\n        email\n        lang\n        theme\n        myTeam {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteMe($userId: ID!) {\n    deleteMe(input: { userId: $userId }) {\n      userId\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteMe($userId: ID!) {\n    deleteMe(input: { userId: $userId }) {\n      userId\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: " mutation AddWidget($sceneId: ID!, $pluginId: ID!, $extensionId: ID!, $lang: Lang) {\n    addWidget(\n      input: {sceneId: $sceneId, pluginId: $pluginId, extensionId: $extensionId}\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n      }\n      sceneWidget {\n        id\n        enabled\n        pluginId\n        extensionId\n      }\n    }\n  }"): (typeof documents)[" mutation AddWidget($sceneId: ID!, $pluginId: ID!, $extensionId: ID!, $lang: Lang) {\n    addWidget(\n      input: {sceneId: $sceneId, pluginId: $pluginId, extensionId: $extensionId}\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n          property {\n            id\n            ...PropertyFragment\n          }\n        }\n      }\n      sceneWidget {\n        id\n        enabled\n        pluginId\n        extensionId\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateWidget(\n    $sceneId: ID!\n    $widgetId: ID!\n    $enabled: Boolean\n    $location: WidgetLocationInput\n    $extended: Boolean\n    $index: Int\n  ) {\n    updateWidget(\n      input: {\n        sceneId: $sceneId\n        widgetId: $widgetId\n        enabled: $enabled\n        location: $location\n        extended: $extended\n        index: $index\n      }\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          extended\n          pluginId\n          extensionId\n          propertyId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWidget(\n    $sceneId: ID!\n    $widgetId: ID!\n    $enabled: Boolean\n    $location: WidgetLocationInput\n    $extended: Boolean\n    $index: Int\n  ) {\n    updateWidget(\n      input: {\n        sceneId: $sceneId\n        widgetId: $widgetId\n        enabled: $enabled\n        location: $location\n        extended: $extended\n        index: $index\n      }\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          extended\n          pluginId\n          extensionId\n          propertyId\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveWidget($sceneId: ID!, $widgetId: ID!) {\n    removeWidget(input: { sceneId: $sceneId, widgetId: $widgetId }) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveWidget($sceneId: ID!, $widgetId: ID!) {\n    removeWidget(input: { sceneId: $sceneId, widgetId: $widgetId }) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateWidgetAlignSystem(\n    $sceneId: ID!\n    $location: WidgetLocationInput!\n    $align: WidgetAreaAlign\n    $padding: WidgetAreaPaddingInput\n    $gap: Int\n    $centered: Boolean\n    $background: String\n  ) {\n    updateWidgetAlignSystem(\n      input: {\n        sceneId: $sceneId\n        location: $location\n        align: $align\n        padding: $padding\n        gap: $gap\n        centered: $centered\n        background: $background\n      }\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n        }\n        widgetAlignSystem {\n          ...WidgetAlignSystemFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWidgetAlignSystem(\n    $sceneId: ID!\n    $location: WidgetLocationInput!\n    $align: WidgetAreaAlign\n    $padding: WidgetAreaPaddingInput\n    $gap: Int\n    $centered: Boolean\n    $background: String\n  ) {\n    updateWidgetAlignSystem(\n      input: {\n        sceneId: $sceneId\n        location: $location\n        align: $align\n        padding: $padding\n        gap: $gap\n        centered: $centered\n        background: $background\n      }\n    ) {\n      scene {\n        id\n        widgets {\n          id\n          enabled\n          pluginId\n          extensionId\n          propertyId\n        }\n        widgetAlignSystem {\n          ...WidgetAlignSystemFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateWorkspace($name: String!) {\n    createTeam(input: { name: $name }) {\n      team {\n        id\n        name\n        members {\n          user {\n            id\n            name\n            email\n          }\n          userId\n          role\n        }\n        personal\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWorkspace($name: String!) {\n    createTeam(input: { name: $name }) {\n      team {\n        id\n        name\n        members {\n          user {\n            id\n            name\n            email\n          }\n          userId\n          role\n        }\n        personal\n        policyId\n        policy {\n          id\n          name\n          projectCount\n          memberCount\n          publishedProjectCount\n          layerCount\n          assetStorageSize\n          datasetSchemaCount\n          datasetCount\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;